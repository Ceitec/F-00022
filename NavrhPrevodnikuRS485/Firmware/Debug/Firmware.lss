
Firmware.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000f62  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000eee  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000008c  00800100  00800100  00000f62  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000f62  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000f94  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000228  00000000  00000000  00000fd8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002556  00000000  00000000  00001200  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e77  00000000  00000000  00003756  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001514  00000000  00000000  000045cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003bc  00000000  00000000  00005ae4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008b4  00000000  00000000  00005ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a9b  00000000  00000000  00006754  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  000071ef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   8:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
   c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  10:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  14:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  18:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  1c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  20:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  24:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  28:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  2c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  30:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  34:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  38:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  3c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  40:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  44:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  48:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  4c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  50:	0c 94 5c 05 	jmp	0xab8	; 0xab8 <__vector_20>
  54:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  58:	0c 94 8f 05 	jmp	0xb1e	; 0xb1e <__vector_22>
  5c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  60:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  68:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  6c:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  70:	0c 94 17 01 	jmp	0x22e	; 0x22e <__vector_28>
  74:	0c 94 68 00 	jmp	0xd0	; 0xd0 <__bad_interrupt>
  78:	0c 94 4a 01 	jmp	0x294	; 0x294 <__vector_30>
  7c:	d8 01       	movw	r26, r16
  7e:	dc 01       	movw	r26, r24
  80:	e0 01       	movw	r28, r0
  82:	e4 01       	movw	r28, r8
  84:	e8 01       	movw	r28, r16
  86:	ec 01       	movw	r28, r24
  88:	f0 01       	movw	r30, r0
  8a:	f4 01       	movw	r30, r8
  8c:	f8 01       	movw	r30, r16
  8e:	fc 01       	movw	r30, r24
  90:	00 02       	muls	r16, r16
  92:	04 02       	muls	r16, r20
  94:	1d 06       	cpc	r1, r29
  96:	21 06       	cpc	r2, r17
  98:	25 06       	cpc	r2, r21
  9a:	29 06       	cpc	r2, r25
  9c:	2d 06       	cpc	r2, r29
  9e:	31 06       	cpc	r3, r17
  a0:	35 06       	cpc	r3, r21
  a2:	39 06       	cpc	r3, r25
  a4:	3d 06       	cpc	r3, r29
  a6:	41 06       	cpc	r4, r17
  a8:	45 06       	cpc	r4, r21
  aa:	49 06       	cpc	r4, r25

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	d0 e1       	ldi	r29, 0x10	; 16
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_clear_bss>:
  b8:	21 e0       	ldi	r18, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
  c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
  c2:	ac 38       	cpi	r26, 0x8C	; 140
  c4:	b2 07       	cpc	r27, r18
  c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
  c8:	0e 94 cf 06 	call	0xd9e	; 0xd9e <main>
  cc:	0c 94 75 07 	jmp	0xeea	; 0xeea <_exit>

000000d0 <__bad_interrupt>:
  d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d4 <Init_Board>:


void Init_Board( void )
{
	// Nastavení RS485 Enable
	sbi(DDRD, DDD4);
  d4:	54 9a       	sbi	0x0a, 4	; 10
	// Nastavení RS485 Enable
	sbi(DDRD, DDD5);
  d6:	55 9a       	sbi	0x0a, 5	; 10
	// UART0 RX
	cbi(DDRD, DDD0);
  d8:	50 98       	cbi	0x0a, 0	; 10
	// UART1 RX
	cbi(DDRD, DDD2);
  da:	52 98       	cbi	0x0a, 2	; 10
	// UART0 TX
	sbi(DDRD, DDD1);
  dc:	51 9a       	sbi	0x0a, 1	; 10
	// UART1 TX
	sbi(DDRD, DDD3);
  de:	53 9a       	sbi	0x0a, 3	; 10
	// LED1
	sbi(DDRD, DDD6);
  e0:	56 9a       	sbi	0x0a, 6	; 10
	// LED2
	sbi(DDRD, DDD7);
  e2:	57 9a       	sbi	0x0a, 7	; 10
	
	cbi(PORTD, PORTD7);
  e4:	5f 98       	cbi	0x0b, 7	; 11
	cbi(PORTD, PORTD6);
  e6:	5e 98       	cbi	0x0b, 6	; 11
	

	
	// Povolení pøijmu dat
 	RS485_EN_INT_receive;
  e8:	5c 98       	cbi	0x0b, 4	; 11
	RS485_EN_EXT_receive;
  ea:	5d 98       	cbi	0x0b, 5	; 11
  ec:	08 95       	ret

000000ee <simple_flag_null0>:
uint8_t uart1_rx_ptr;
uint8_t uart1_rx_iptr;

void simple_flag_null0( void )
{
	if (citacka0 > 10000)
  ee:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <citacka0>
  f2:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <citacka0+0x1>
  f6:	81 31       	cpi	r24, 0x11	; 17
  f8:	97 42       	sbci	r25, 0x27	; 39
  fa:	40 f0       	brcs	.+16     	; 0x10c <simple_flag_null0+0x1e>
	{
		// Vymaže každách 50ms flag interní èítaè
		uart0_rx_iptr=0;
  fc:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <uart0_rx_iptr>
		uart0_rx_ptr=0;
 100:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <uart0_rx_ptr>
		citacka0=0;
 104:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <citacka0+0x1>
 108:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <citacka0>
	}
	citacka0++;
 10c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <citacka0>
 110:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <citacka0+0x1>
 114:	01 96       	adiw	r24, 0x01	; 1
 116:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <citacka0+0x1>
 11a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <citacka0>
 11e:	08 95       	ret

00000120 <simple_flag_null1>:
}

void simple_flag_null1( void )
{
	if (citacka1 > 10000)
 120:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 124:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 128:	81 31       	cpi	r24, 0x11	; 17
 12a:	97 42       	sbci	r25, 0x27	; 39
 12c:	40 f0       	brcs	.+16     	; 0x13e <simple_flag_null1+0x1e>
	{
		// Vymaže každách 50ms flag interní èítaè
		uart1_rx_iptr=0;
 12e:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <uart1_rx_iptr>
		uart1_rx_ptr=0;
 132:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <uart1_rx_ptr>
		citacka1=0;
 136:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 13a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	}
	citacka1++;
 13e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 142:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 146:	01 96       	adiw	r24, 0x01	; 1
 148:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 14c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
 150:	08 95       	ret

00000152 <uart1_init>:


void uart1_transmit_char(uint8_t data)
{
	while ( !( UART1_UCSRA & (1 << UART1_UDRE)) );
	UART1_UDR = data;
 152:	cf 92       	push	r12
 154:	df 92       	push	r13
 156:	ef 92       	push	r14
 158:	ff 92       	push	r15
 15a:	6b 01       	movw	r12, r22
 15c:	7c 01       	movw	r14, r24
 15e:	cc 0c       	add	r12, r12
 160:	dd 1c       	adc	r13, r13
 162:	ee 1c       	adc	r14, r14
 164:	ff 1c       	adc	r15, r15
 166:	cc 0c       	add	r12, r12
 168:	dd 1c       	adc	r13, r13
 16a:	ee 1c       	adc	r14, r14
 16c:	ff 1c       	adc	r15, r15
 16e:	cc 0c       	add	r12, r12
 170:	dd 1c       	adc	r13, r13
 172:	ee 1c       	adc	r14, r14
 174:	ff 1c       	adc	r15, r15
 176:	a7 01       	movw	r20, r14
 178:	96 01       	movw	r18, r12
 17a:	22 0f       	add	r18, r18
 17c:	33 1f       	adc	r19, r19
 17e:	44 1f       	adc	r20, r20
 180:	55 1f       	adc	r21, r21
 182:	60 e0       	ldi	r22, 0x00	; 0
 184:	74 e2       	ldi	r23, 0x24	; 36
 186:	84 ef       	ldi	r24, 0xF4	; 244
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	0e 94 13 07 	call	0xe26	; 0xe26 <__udivmodsi4>
 18e:	21 50       	subi	r18, 0x01	; 1
 190:	31 09       	sbc	r19, r1
 192:	41 e0       	ldi	r20, 0x01	; 1
 194:	50 e0       	ldi	r21, 0x00	; 0
 196:	c6 16       	cp	r12, r22
 198:	d7 06       	cpc	r13, r23
 19a:	e8 06       	cpc	r14, r24
 19c:	f9 06       	cpc	r15, r25
 19e:	10 f0       	brcs	.+4      	; 0x1a4 <uart1_init+0x52>
 1a0:	40 e0       	ldi	r20, 0x00	; 0
 1a2:	50 e0       	ldi	r21, 0x00	; 0
 1a4:	24 0f       	add	r18, r20
 1a6:	35 1f       	adc	r19, r21
 1a8:	20 93 cc 00 	sts	0x00CC, r18	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 1ac:	30 93 cd 00 	sts	0x00CD, r19	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 1b0:	e9 ec       	ldi	r30, 0xC9	; 201
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	80 81       	ld	r24, Z
 1b6:	88 61       	ori	r24, 0x18	; 24
 1b8:	80 83       	st	Z, r24
 1ba:	ea ec       	ldi	r30, 0xCA	; 202
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	80 81       	ld	r24, Z
 1c0:	86 60       	ori	r24, 0x06	; 6
 1c2:	80 83       	st	Z, r24
 1c4:	80 e0       	ldi	r24, 0x00	; 0
 1c6:	ff 90       	pop	r15
 1c8:	ef 90       	pop	r14
 1ca:	df 90       	pop	r13
 1cc:	cf 90       	pop	r12
 1ce:	08 95       	ret

000001d0 <uart1_interrupt_rx>:
 1d0:	88 23       	and	r24, r24
 1d2:	31 f0       	breq	.+12     	; 0x1e0 <uart1_interrupt_rx+0x10>
 1d4:	e9 ec       	ldi	r30, 0xC9	; 201
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	80 81       	ld	r24, Z
 1da:	80 68       	ori	r24, 0x80	; 128
 1dc:	80 83       	st	Z, r24
 1de:	05 c0       	rjmp	.+10     	; 0x1ea <uart1_interrupt_rx+0x1a>
 1e0:	e9 ec       	ldi	r30, 0xC9	; 201
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	80 81       	ld	r24, Z
 1e6:	80 78       	andi	r24, 0x80	; 128
 1e8:	80 83       	st	Z, r24
 1ea:	80 e0       	ldi	r24, 0x00	; 0
 1ec:	08 95       	ret

000001ee <uart1_interrupt_tx>:
 1ee:	88 23       	and	r24, r24
 1f0:	31 f0       	breq	.+12     	; 0x1fe <uart1_interrupt_tx+0x10>
 1f2:	e9 ec       	ldi	r30, 0xC9	; 201
 1f4:	f0 e0       	ldi	r31, 0x00	; 0
 1f6:	80 81       	ld	r24, Z
 1f8:	80 64       	ori	r24, 0x40	; 64
 1fa:	80 83       	st	Z, r24
 1fc:	05 c0       	rjmp	.+10     	; 0x208 <uart1_interrupt_tx+0x1a>
 1fe:	e9 ec       	ldi	r30, 0xC9	; 201
 200:	f0 e0       	ldi	r31, 0x00	; 0
 202:	80 81       	ld	r24, Z
 204:	80 74       	andi	r24, 0x40	; 64
 206:	80 83       	st	Z, r24
 208:	80 e0       	ldi	r24, 0x00	; 0
 20a:	08 95       	ret

0000020c <uart1_receive_char>:
 20c:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <uart1_rx_ptr>
 210:	f0 e0       	ldi	r31, 0x00	; 0
 212:	e6 5b       	subi	r30, 0xB6	; 182
 214:	fe 4f       	sbci	r31, 0xFE	; 254
 216:	80 83       	st	Z, r24
 218:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <uart1_rx_ptr>
 21c:	8f 5f       	subi	r24, 0xFF	; 255
 21e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <uart1_rx_ptr>
 222:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <uart1_rx_iptr>
 226:	8f 5f       	subi	r24, 0xFF	; 255
 228:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <uart1_rx_iptr>
 22c:	08 95       	ret

0000022e <__vector_28>:
 22e:	1f 92       	push	r1
 230:	0f 92       	push	r0
 232:	0f b6       	in	r0, 0x3f	; 63
 234:	0f 92       	push	r0
 236:	11 24       	eor	r1, r1
 238:	2f 93       	push	r18
 23a:	3f 93       	push	r19
 23c:	4f 93       	push	r20
 23e:	5f 93       	push	r21
 240:	6f 93       	push	r22
 242:	7f 93       	push	r23
 244:	8f 93       	push	r24
 246:	9f 93       	push	r25
 248:	af 93       	push	r26
 24a:	bf 93       	push	r27
 24c:	ef 93       	push	r30
 24e:	ff 93       	push	r31
 250:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 254:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 258:	5f 98       	cbi	0x0b, 7	; 11
 25a:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 25e:	e7 e4       	ldi	r30, 0x47	; 71
 260:	f1 e0       	ldi	r31, 0x01	; 1
 262:	80 83       	st	Z, r24
 264:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
 268:	91 83       	std	Z+1, r25	; 0x01
 26a:	95 e0       	ldi	r25, 0x05	; 5
 26c:	92 83       	std	Z+2, r25	; 0x02
 26e:	0e 94 06 01 	call	0x20c	; 0x20c <uart1_receive_char>
 272:	ff 91       	pop	r31
 274:	ef 91       	pop	r30
 276:	bf 91       	pop	r27
 278:	af 91       	pop	r26
 27a:	9f 91       	pop	r25
 27c:	8f 91       	pop	r24
 27e:	7f 91       	pop	r23
 280:	6f 91       	pop	r22
 282:	5f 91       	pop	r21
 284:	4f 91       	pop	r20
 286:	3f 91       	pop	r19
 288:	2f 91       	pop	r18
 28a:	0f 90       	pop	r0
 28c:	0f be       	out	0x3f, r0	; 63
 28e:	0f 90       	pop	r0
 290:	1f 90       	pop	r1
 292:	18 95       	reti

00000294 <__vector_30>:
 294:	1f 92       	push	r1
 296:	0f 92       	push	r0
 298:	0f b6       	in	r0, 0x3f	; 63
 29a:	0f 92       	push	r0
 29c:	11 24       	eor	r1, r1
 29e:	8f 93       	push	r24
 2a0:	ef 93       	push	r30
 2a2:	ff 93       	push	r31
 2a4:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <uart1_tx_flag>
 2a8:	88 23       	and	r24, r24
 2aa:	d9 f0       	breq	.+54     	; 0x2e2 <__vector_30+0x4e>
 2ac:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <uart1_tx_iptr>
 2b0:	89 30       	cpi	r24, 0x09	; 9
 2b2:	30 f0       	brcs	.+12     	; 0x2c0 <__vector_30+0x2c>
 2b4:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <uart1_tx_flag>
 2b8:	5d 98       	cbi	0x0b, 5	; 11
 2ba:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <uart1_tx_iptr>
 2be:	0d c0       	rjmp	.+26     	; 0x2da <__vector_30+0x46>
 2c0:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <uart1_tx_iptr>
 2c4:	f0 e0       	ldi	r31, 0x00	; 0
 2c6:	e2 5c       	subi	r30, 0xC2	; 194
 2c8:	fe 4f       	sbci	r31, 0xFE	; 254
 2ca:	80 81       	ld	r24, Z
 2cc:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 2d0:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <uart1_tx_iptr>
 2d4:	8f 5f       	subi	r24, 0xFF	; 255
 2d6:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <uart1_tx_iptr>
 2da:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <uart1_rx_iptr>
 2de:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <uart1_rx_ptr>
 2e2:	ff 91       	pop	r31
 2e4:	ef 91       	pop	r30
 2e6:	8f 91       	pop	r24
 2e8:	0f 90       	pop	r0
 2ea:	0f be       	out	0x3f, r0	; 63
 2ec:	0f 90       	pop	r0
 2ee:	1f 90       	pop	r1
 2f0:	18 95       	reti

000002f2 <check_uart1>:
 2f2:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <uart1_rx_iptr>
 2f6:	89 30       	cpi	r24, 0x09	; 9
 2f8:	18 f0       	brcs	.+6      	; 0x300 <check_uart1+0xe>
 2fa:	81 e0       	ldi	r24, 0x01	; 1
 2fc:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <uart1_rx_flag>
 300:	f8 94       	cli
 302:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <uart1_rx_flag>
 306:	88 23       	and	r24, r24
 308:	09 f4       	brne	.+2      	; 0x30c <check_uart1+0x1a>
 30a:	41 c0       	rjmp	.+130    	; 0x38e <check_uart1+0x9c>
 30c:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <uart1_sum>
 310:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <uart1_i>
 314:	89 e0       	ldi	r24, 0x09	; 9
 316:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <uart1_i>
 31a:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <uart1_i>
 31e:	82 30       	cpi	r24, 0x02	; 2
 320:	c0 f0       	brcs	.+48     	; 0x352 <check_uart1+0x60>
 322:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <uart1_rx_ptr>
 326:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <uart1_i>
 32a:	f0 e0       	ldi	r31, 0x00	; 0
 32c:	e8 1b       	sub	r30, r24
 32e:	f1 09       	sbc	r31, r1
 330:	e6 5b       	subi	r30, 0xB6	; 182
 332:	fe 4f       	sbci	r31, 0xFE	; 254
 334:	90 81       	ld	r25, Z
 336:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <uart1_sum>
 33a:	89 0f       	add	r24, r25
 33c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <uart1_sum>
 340:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <uart1_i>
 344:	81 50       	subi	r24, 0x01	; 1
 346:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <uart1_i>
 34a:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <uart1_i>
 34e:	82 30       	cpi	r24, 0x02	; 2
 350:	40 f7       	brcc	.-48     	; 0x322 <check_uart1+0x30>
 352:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <uart1_rx_ptr>
 356:	f0 e0       	ldi	r31, 0x00	; 0
 358:	e7 5b       	subi	r30, 0xB7	; 183
 35a:	fe 4f       	sbci	r31, 0xFE	; 254
 35c:	80 81       	ld	r24, Z
 35e:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <uart1_check_sum>
 362:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <uart1_sum>
 366:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <uart1_check_sum>
 36a:	98 13       	cpse	r25, r24
 36c:	06 c0       	rjmp	.+12     	; 0x37a <check_uart1+0x88>
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <uart1_ret>
 374:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <uart1_rx_iptr>
 378:	07 c0       	rjmp	.+14     	; 0x388 <check_uart1+0x96>
 37a:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <uart1_rx_iptr>
 37e:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <uart1_rx_ptr>
 382:	82 e0       	ldi	r24, 0x02	; 2
 384:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <uart1_ret>
 388:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <uart1_check_sum>
 38c:	02 c0       	rjmp	.+4      	; 0x392 <check_uart1+0xa0>
 38e:	10 92 0a 01 	sts	0x010A, r1	; 0x80010a <uart1_ret>
 392:	78 94       	sei
 394:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <uart1_rx_flag>
 398:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <uart1_ret>
 39c:	08 95       	ret

0000039e <uart1_set_baud>:
}

void uart1_set_baud(uint8_t baud)
{
	// UART port
	switch (baud) {
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	8c 30       	cpi	r24, 0x0C	; 12
 3a2:	91 05       	cpc	r25, r1
 3a4:	a0 f5       	brcc	.+104    	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 3a6:	fc 01       	movw	r30, r24
 3a8:	e2 5c       	subi	r30, 0xC2	; 194
 3aa:	ff 4f       	sbci	r31, 0xFF	; 255
 3ac:	0c 94 35 07 	jmp	0xe6a	; 0xe6a <__tablejump2__>
		case 0:
			MACRO_BAUDRATE(9600);
 3b0:	87 e6       	ldi	r24, 0x67	; 103
 3b2:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
			break;
 3b6:	08 95       	ret
		case 1:
			MACRO_BAUDRATE(14400);
 3b8:	84 e4       	ldi	r24, 0x44	; 68
 3ba:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
			break;
 3be:	08 95       	ret
		case 2:
			MACRO_BAUDRATE(19200);
 3c0:	83 e3       	ldi	r24, 0x33	; 51
 3c2:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
			break;
 3c6:	08 95       	ret
		case 3:
			MACRO_BAUDRATE(28800);
 3c8:	82 e2       	ldi	r24, 0x22	; 34
 3ca:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
			break;
 3ce:	08 95       	ret
		case 4:
			MACRO_BAUDRATE(38400);
 3d0:	89 e1       	ldi	r24, 0x19	; 25
 3d2:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
			break;
 3d6:	08 95       	ret
		case 5:
			MACRO_BAUDRATE(57600);
 3d8:	80 e1       	ldi	r24, 0x10	; 16
 3da:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
			break;
 3de:	08 95       	ret
		case 6:
			MACRO_BAUDRATE(76800);
 3e0:	8c e0       	ldi	r24, 0x0C	; 12
 3e2:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
			break;
 3e6:	08 95       	ret
		case 7:
			MACRO_BAUDRATE(115200);
 3e8:	88 e0       	ldi	r24, 0x08	; 8
 3ea:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
			break;
 3ee:	08 95       	ret
		case 8:
			MACRO_BAUDRATE(230400);
 3f0:	83 e0       	ldi	r24, 0x03	; 3
 3f2:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
			break;
 3f6:	08 95       	ret
		case 9:
			MACRO_BAUDRATE(250000);
 3f8:	83 e0       	ldi	r24, 0x03	; 3
 3fa:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
			break;
 3fe:	08 95       	ret
		case 10:
			MACRO_BAUDRATE(500000);
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
			break;
 406:	08 95       	ret
		case 11:
			MACRO_BAUDRATE(1000000);
 408:	10 92 cc 00 	sts	0x00CC, r1	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
			break;
 40c:	08 95       	ret
		default:
			MACRO_BAUDRATE(115200);
 40e:	88 e0       	ldi	r24, 0x08	; 8
 410:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 414:	08 95       	ret

00000416 <TB_buf_fill_In>:
	TB_Buf_Out.b[5] = (uint8_t) (value >> 16);
	TB_Buf_Out.b[6] = (uint8_t) (value >> 8);
	TB_Buf_Out.b[7] = (uint8_t) (value >> 0);
	TB_calcSum();
	TB_Send_Com();
}
 416:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <uart0_rx_ptr>
 41a:	f0 e0       	ldi	r31, 0x00	; 0
 41c:	ed 5a       	subi	r30, 0xAD	; 173
 41e:	fe 4f       	sbci	r31, 0xFE	; 254
 420:	80 e0       	ldi	r24, 0x00	; 0
 422:	90 e0       	ldi	r25, 0x00	; 0
 424:	21 91       	ld	r18, Z+
 426:	dc 01       	movw	r26, r24
 428:	a2 5c       	subi	r26, 0xC2	; 194
 42a:	be 4f       	sbci	r27, 0xFE	; 254
 42c:	2c 93       	st	X, r18
 42e:	01 96       	adiw	r24, 0x01	; 1
 430:	89 30       	cpi	r24, 0x09	; 9
 432:	91 05       	cpc	r25, r1
 434:	b9 f7       	brne	.-18     	; 0x424 <TB_buf_fill_In+0xe>
 436:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <uart0_rx_ptr>
 43a:	82 31       	cpi	r24, 0x12	; 18
 43c:	10 f0       	brcs	.+4      	; 0x442 <TB_buf_fill_In+0x2c>
 43e:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <uart0_rx_ptr>
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	08 95       	ret

00000446 <TB_buf_fill_Out>:
 446:	e0 91 04 01 	lds	r30, 0x0104	; 0x800104 <uart1_rx_ptr>
 44a:	f0 e0       	ldi	r31, 0x00	; 0
 44c:	ef 5b       	subi	r30, 0xBF	; 191
 44e:	fe 4f       	sbci	r31, 0xFE	; 254
 450:	80 e0       	ldi	r24, 0x00	; 0
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	21 91       	ld	r18, Z+
 456:	dc 01       	movw	r26, r24
 458:	a2 59       	subi	r26, 0x92	; 146
 45a:	be 4f       	sbci	r27, 0xFE	; 254
 45c:	2c 93       	st	X, r18
 45e:	01 96       	adiw	r24, 0x01	; 1
 460:	89 30       	cpi	r24, 0x09	; 9
 462:	91 05       	cpc	r25, r1
 464:	b9 f7       	brne	.-18     	; 0x454 <TB_buf_fill_Out+0xe>
 466:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <uart1_rx_ptr>
 46a:	82 31       	cpi	r24, 0x12	; 18
 46c:	10 f0       	brcs	.+4      	; 0x472 <TB_buf_fill_Out+0x2c>
 46e:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <uart1_rx_ptr>
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	08 95       	ret

00000476 <TB_Send_Com>:
 476:	81 e0       	ldi	r24, 0x01	; 1
 478:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <uart0_tx_flag>
 47c:	5c 9a       	sbi	0x0b, 4	; 11
 47e:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <uart0_tx_iptr>
 482:	8e 0f       	add	r24, r30
 484:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <uart0_tx_iptr>
 488:	f0 e0       	ldi	r31, 0x00	; 0
 48a:	e2 59       	subi	r30, 0x92	; 146
 48c:	fe 4f       	sbci	r31, 0xFE	; 254
 48e:	80 81       	ld	r24, Z
 490:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 494:	08 95       	ret

00000496 <TB_calcSum>:
 496:	80 e0       	ldi	r24, 0x00	; 0
 498:	90 e0       	ldi	r25, 0x00	; 0
 49a:	20 e0       	ldi	r18, 0x00	; 0
 49c:	fc 01       	movw	r30, r24
 49e:	e2 59       	subi	r30, 0x92	; 146
 4a0:	fe 4f       	sbci	r31, 0xFE	; 254
 4a2:	30 81       	ld	r19, Z
 4a4:	23 0f       	add	r18, r19
 4a6:	01 96       	adiw	r24, 0x01	; 1
 4a8:	88 30       	cpi	r24, 0x08	; 8
 4aa:	91 05       	cpc	r25, r1
 4ac:	b9 f7       	brne	.-18     	; 0x49c <TB_calcSum+0x6>
 4ae:	20 93 76 01 	sts	0x0176, r18	; 0x800176 <TB_Buf_Out+0x8>
 4b2:	08 95       	ret

000004b4 <TB_SendAck>:

void TB_SendAck(uint8_t status, uint32_t value)
{
	TB_Buf_Out.b[0] = TB_addr_Reply;
 4b4:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <TB_addr_Reply>
 4b8:	ee e6       	ldi	r30, 0x6E	; 110
 4ba:	f1 e0       	ldi	r31, 0x01	; 1
 4bc:	90 83       	st	Z, r25
	TB_Buf_Out.b[1] = TB_addr_Module;
 4be:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <TB_addr_Module>
 4c2:	91 83       	std	Z+1, r25	; 0x01
	TB_Buf_Out.b[2] = status;
 4c4:	82 83       	std	Z+2, r24	; 0x02
	TB_Buf_Out.b[3] = TB_Buf_In.b[TB_BUF_COMMAND];
 4c6:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <TB_Buf_In+0x1>
 4ca:	83 83       	std	Z+3, r24	; 0x03
	TB_Buf_Out.b[4] = (value >> 24);
 4cc:	87 2f       	mov	r24, r23
 4ce:	99 27       	eor	r25, r25
 4d0:	aa 27       	eor	r26, r26
 4d2:	bb 27       	eor	r27, r27
 4d4:	84 83       	std	Z+4, r24	; 0x04
	TB_Buf_Out.b[5] = (value >> 16);
 4d6:	cb 01       	movw	r24, r22
 4d8:	aa 27       	eor	r26, r26
 4da:	bb 27       	eor	r27, r27
 4dc:	85 83       	std	Z+5, r24	; 0x05
	TB_Buf_Out.b[6] = (value >> 8);
 4de:	bb 27       	eor	r27, r27
 4e0:	a7 2f       	mov	r26, r23
 4e2:	96 2f       	mov	r25, r22
 4e4:	85 2f       	mov	r24, r21
 4e6:	86 83       	std	Z+6, r24	; 0x06
	TB_Buf_Out.b[7] = (value >> 0);
 4e8:	47 83       	std	Z+7, r20	; 0x07
	TB_calcSum();
 4ea:	0e 94 4b 02 	call	0x496	; 0x496 <TB_calcSum>
	TB_Send_Com();
 4ee:	0e 94 3b 02 	call	0x476	; 0x476 <TB_Send_Com>
 4f2:	08 95       	ret

000004f4 <TB_Process0>:

uint32_t TB_Value=0;


uint8_t TB_Process0( void )
{
 4f4:	0f 93       	push	r16
 4f6:	1f 93       	push	r17
 4f8:	cf 93       	push	r28
	uint8_t b=0;
	TB_Value =	(((int32_t) TB_Buf_In.b[4]) << 24) |
 4fa:	ee e3       	ldi	r30, 0x3E	; 62
 4fc:	f1 e0       	ldi	r31, 0x01	; 1
 4fe:	24 81       	ldd	r18, Z+4	; 0x04
	(((int32_t) TB_Buf_In.b[5]) << 16) |
 500:	45 81       	ldd	r20, Z+5	; 0x05
	(((int32_t) TB_Buf_In.b[6]) <<  8) |
 502:	86 81       	ldd	r24, Z+6	; 0x06
	(((int32_t) TB_Buf_In.b[7])      ) ;
 504:	97 81       	ldd	r25, Z+7	; 0x07

uint8_t TB_Process0( void )
{
	uint8_t b=0;
	TB_Value =	(((int32_t) TB_Buf_In.b[4]) << 24) |
	(((int32_t) TB_Buf_In.b[5]) << 16) |
 506:	50 e0       	ldi	r21, 0x00	; 0
 508:	60 e0       	ldi	r22, 0x00	; 0
 50a:	70 e0       	ldi	r23, 0x00	; 0
 50c:	ba 01       	movw	r22, r20
 50e:	55 27       	eor	r21, r21
 510:	44 27       	eor	r20, r20


uint8_t TB_Process0( void )
{
	uint8_t b=0;
	TB_Value =	(((int32_t) TB_Buf_In.b[4]) << 24) |
 512:	72 2b       	or	r23, r18
 514:	49 2b       	or	r20, r25
	(((int32_t) TB_Buf_In.b[5]) << 16) |
	(((int32_t) TB_Buf_In.b[6]) <<  8) |
 516:	58 2b       	or	r21, r24


uint8_t TB_Process0( void )
{
	uint8_t b=0;
	TB_Value =	(((int32_t) TB_Buf_In.b[4]) << 24) |
 518:	db 01       	movw	r26, r22
 51a:	ca 01       	movw	r24, r20
 51c:	40 93 0d 01 	sts	0x010D, r20	; 0x80010d <TB_Value>
 520:	50 93 0e 01 	sts	0x010E, r21	; 0x80010e <TB_Value+0x1>
 524:	60 93 0f 01 	sts	0x010F, r22	; 0x80010f <TB_Value+0x2>
 528:	70 93 10 01 	sts	0x0110, r23	; 0x800110 <TB_Value+0x3>
	(((int32_t) TB_Buf_In.b[5]) << 16) |
	(((int32_t) TB_Buf_In.b[6]) <<  8) |
	(((int32_t) TB_Buf_In.b[7])      ) ;
	switch(TB_Buf_In.b[TB_BUF_COMMAND])
 52c:	c1 81       	ldd	r28, Z+1	; 0x01
 52e:	c0 31       	cpi	r28, 0x10	; 16
 530:	48 f4       	brcc	.+18     	; 0x544 <TB_Process0+0x50>
 532:	ce 30       	cpi	r28, 0x0E	; 14
 534:	08 f0       	brcs	.+2      	; 0x538 <TB_Process0+0x44>
 536:	f7 c1       	rjmp	.+1006   	; 0x926 <TB_Process0+0x432>
 538:	c9 30       	cpi	r28, 0x09	; 9
 53a:	41 f0       	breq	.+16     	; 0x54c <TB_Process0+0x58>
 53c:	ca 30       	cpi	r28, 0x0A	; 10
 53e:	09 f4       	brne	.+2      	; 0x542 <TB_Process0+0x4e>
 540:	2a c1       	rjmp	.+596    	; 0x796 <TB_Process0+0x2a2>
 542:	e8 c1       	rjmp	.+976    	; 0x914 <TB_Process0+0x420>
 544:	c8 38       	cpi	r28, 0x88	; 136
 546:	09 f4       	brne	.+2      	; 0x54a <TB_Process0+0x56>
 548:	b2 c1       	rjmp	.+868    	; 0x8ae <TB_Process0+0x3ba>
 54a:	e4 c1       	rjmp	.+968    	; 0x914 <TB_Process0+0x420>
		case TB_CMD_GIO:
			return TB_CMD_GIO;
			break;
		case TB_CMD_SGP:
			// Nastavování uart0 - Komunikaèní interní RS485
			if (TB_Buf_In.b[TB_BUF_MOTOR] == 0)
 54c:	c0 91 41 01 	lds	r28, 0x0141	; 0x800141 <TB_Buf_In+0x3>
 550:	c1 11       	cpse	r28, r1
 552:	86 c0       	rjmp	.+268    	; 0x660 <TB_Process0+0x16c>
			{
				switch (TB_Buf_In.b[TB_BUF_TYPE])
 554:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <TB_Buf_In+0x2>
 558:	21 34       	cpi	r18, 0x41	; 65
 55a:	39 f1       	breq	.+78     	; 0x5aa <TB_Process0+0xb6>
 55c:	18 f4       	brcc	.+6      	; 0x564 <TB_Process0+0x70>
 55e:	20 34       	cpi	r18, 0x40	; 64
 560:	39 f0       	breq	.+14     	; 0x570 <TB_Process0+0x7c>
 562:	7a c0       	rjmp	.+244    	; 0x658 <TB_Process0+0x164>
 564:	22 34       	cpi	r18, 0x42	; 66
 566:	f1 f1       	breq	.+124    	; 0x5e4 <TB_Process0+0xf0>
 568:	2c 34       	cpi	r18, 0x4C	; 76
 56a:	09 f4       	brne	.+2      	; 0x56e <TB_Process0+0x7a>
 56c:	58 c0       	rjmp	.+176    	; 0x61e <TB_Process0+0x12a>
 56e:	74 c0       	rjmp	.+232    	; 0x658 <TB_Process0+0x164>
				{
					case TB_GBPARAM_EEMAGIC:
						if (TB_Value != TB_gbparam0.eemagic)
 570:	00 91 27 01 	lds	r16, 0x0127	; 0x800127 <TB_gbparam0>
 574:	10 e0       	ldi	r17, 0x00	; 0
 576:	20 e0       	ldi	r18, 0x00	; 0
 578:	30 e0       	ldi	r19, 0x00	; 0
 57a:	80 17       	cp	r24, r16
 57c:	91 07       	cpc	r25, r17
 57e:	a2 07       	cpc	r26, r18
 580:	b3 07       	cpc	r27, r19
 582:	39 f0       	breq	.+14     	; 0x592 <TB_Process0+0x9e>
						{
							TB_gbparam0.eemagic = TB_Value;
 584:	40 93 27 01 	sts	0x0127, r20	; 0x800127 <TB_gbparam0>
							b = (void *) &(TB_gbparam0.eemagic) - (void *) &(TB_gbparam0);
							eeprom_update_byte( (uint8_t * ) (b+EEPROM_START_ADDRESS_0), TB_gbparam0.eemagic);
 588:	64 2f       	mov	r22, r20
 58a:	80 e1       	ldi	r24, 0x10	; 16
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	0e 94 4b 07 	call	0xe96	; 0xe96 <eeprom_update_byte>
						}
						TB_SendAck(TB_ERR_EEPROM_OK, TB_Value);
 592:	40 91 0d 01 	lds	r20, 0x010D	; 0x80010d <TB_Value>
 596:	50 91 0e 01 	lds	r21, 0x010E	; 0x80010e <TB_Value+0x1>
 59a:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <TB_Value+0x2>
 59e:	70 91 10 01 	lds	r23, 0x0110	; 0x800110 <TB_Value+0x3>
 5a2:	85 e6       	ldi	r24, 0x65	; 101
 5a4:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <TB_SendAck>
						break;
 5a8:	be c1       	rjmp	.+892    	; 0x926 <TB_Process0+0x432>
					case TB_GBPARAM_BAUD:
						if (TB_Value != TB_gbparam0.baud)
 5aa:	00 91 28 01 	lds	r16, 0x0128	; 0x800128 <TB_gbparam0+0x1>
 5ae:	10 e0       	ldi	r17, 0x00	; 0
 5b0:	20 e0       	ldi	r18, 0x00	; 0
 5b2:	30 e0       	ldi	r19, 0x00	; 0
 5b4:	80 17       	cp	r24, r16
 5b6:	91 07       	cpc	r25, r17
 5b8:	a2 07       	cpc	r26, r18
 5ba:	b3 07       	cpc	r27, r19
 5bc:	39 f0       	breq	.+14     	; 0x5cc <TB_Process0+0xd8>
						{
							TB_gbparam0.baud = TB_Value;
 5be:	40 93 28 01 	sts	0x0128, r20	; 0x800128 <TB_gbparam0+0x1>
							b = (void *) &(TB_gbparam0.baud) - (void *) &(TB_gbparam0);
							eeprom_update_byte( (uint8_t * ) (b+EEPROM_START_ADDRESS_0), TB_gbparam0.baud);
 5c2:	64 2f       	mov	r22, r20
 5c4:	81 e1       	ldi	r24, 0x11	; 17
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	0e 94 4b 07 	call	0xe96	; 0xe96 <eeprom_update_byte>
						}
						TB_SendAck(TB_ERR_EEPROM_OK, TB_Value);
 5cc:	40 91 0d 01 	lds	r20, 0x010D	; 0x80010d <TB_Value>
 5d0:	50 91 0e 01 	lds	r21, 0x010E	; 0x80010e <TB_Value+0x1>
 5d4:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <TB_Value+0x2>
 5d8:	70 91 10 01 	lds	r23, 0x0110	; 0x800110 <TB_Value+0x3>
 5dc:	85 e6       	ldi	r24, 0x65	; 101
 5de:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <TB_SendAck>
						break;
 5e2:	a1 c1       	rjmp	.+834    	; 0x926 <TB_Process0+0x432>
					case TB_GBPARAM_ADDRESS:
						if (TB_Value != TB_gbparam0.address)
 5e4:	00 91 29 01 	lds	r16, 0x0129	; 0x800129 <TB_gbparam0+0x2>
 5e8:	10 e0       	ldi	r17, 0x00	; 0
 5ea:	20 e0       	ldi	r18, 0x00	; 0
 5ec:	30 e0       	ldi	r19, 0x00	; 0
 5ee:	80 17       	cp	r24, r16
 5f0:	91 07       	cpc	r25, r17
 5f2:	a2 07       	cpc	r26, r18
 5f4:	b3 07       	cpc	r27, r19
 5f6:	39 f0       	breq	.+14     	; 0x606 <TB_Process0+0x112>
						{
							TB_gbparam0.address = TB_Value;
 5f8:	40 93 29 01 	sts	0x0129, r20	; 0x800129 <TB_gbparam0+0x2>
							b = (void *) &(TB_gbparam0.address) - (void *) &(TB_gbparam0);
							eeprom_update_byte( (uint8_t * ) (b+EEPROM_START_ADDRESS_0), TB_gbparam0.address);
 5fc:	64 2f       	mov	r22, r20
 5fe:	82 e1       	ldi	r24, 0x12	; 18
 600:	90 e0       	ldi	r25, 0x00	; 0
 602:	0e 94 4b 07 	call	0xe96	; 0xe96 <eeprom_update_byte>
						}
						TB_SendAck(TB_ERR_EEPROM_OK, TB_Value);
 606:	40 91 0d 01 	lds	r20, 0x010D	; 0x80010d <TB_Value>
 60a:	50 91 0e 01 	lds	r21, 0x010E	; 0x80010e <TB_Value+0x1>
 60e:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <TB_Value+0x2>
 612:	70 91 10 01 	lds	r23, 0x0110	; 0x800110 <TB_Value+0x3>
 616:	85 e6       	ldi	r24, 0x65	; 101
 618:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <TB_SendAck>
						break;
 61c:	84 c1       	rjmp	.+776    	; 0x926 <TB_Process0+0x432>
					case TB_GBPARAM_HOST_ADDR:
						if (TB_Value != TB_gbparam0.host_address)
 61e:	00 91 2b 01 	lds	r16, 0x012B	; 0x80012b <TB_gbparam0+0x4>
 622:	10 e0       	ldi	r17, 0x00	; 0
 624:	20 e0       	ldi	r18, 0x00	; 0
 626:	30 e0       	ldi	r19, 0x00	; 0
 628:	80 17       	cp	r24, r16
 62a:	91 07       	cpc	r25, r17
 62c:	a2 07       	cpc	r26, r18
 62e:	b3 07       	cpc	r27, r19
 630:	39 f0       	breq	.+14     	; 0x640 <TB_Process0+0x14c>
						{
							TB_gbparam0.host_address = TB_Value;
 632:	40 93 2b 01 	sts	0x012B, r20	; 0x80012b <TB_gbparam0+0x4>
							b = (void *) &(TB_gbparam0.host_address) - (void *) &(TB_gbparam0);
							eeprom_update_byte( (uint8_t * ) (b+EEPROM_START_ADDRESS_0), TB_gbparam0.host_address);
 636:	64 2f       	mov	r22, r20
 638:	84 e1       	ldi	r24, 0x14	; 20
 63a:	90 e0       	ldi	r25, 0x00	; 0
 63c:	0e 94 4b 07 	call	0xe96	; 0xe96 <eeprom_update_byte>
						}
						TB_SendAck(TB_ERR_EEPROM_OK, TB_Value);
 640:	40 91 0d 01 	lds	r20, 0x010D	; 0x80010d <TB_Value>
 644:	50 91 0e 01 	lds	r21, 0x010E	; 0x80010e <TB_Value+0x1>
 648:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <TB_Value+0x2>
 64c:	70 91 10 01 	lds	r23, 0x0110	; 0x800110 <TB_Value+0x3>
 650:	85 e6       	ldi	r24, 0x65	; 101
 652:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <TB_SendAck>
						break;
 656:	67 c1       	rjmp	.+718    	; 0x926 <TB_Process0+0x432>
					default:
						TB_SendAck(TB_ERR_TYPE, TB_Value); // invalid value
 658:	83 e0       	ldi	r24, 0x03	; 3
 65a:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <TB_SendAck>
						break;
 65e:	63 c1       	rjmp	.+710    	; 0x926 <TB_Process0+0x432>
				}
			}
			// Nastavování uart1 - Komunikaèní externí RS485
			else if (TB_Buf_In.b[TB_BUF_MOTOR] == 1)
 660:	20 91 41 01 	lds	r18, 0x0141	; 0x800141 <TB_Buf_In+0x3>
 664:	21 30       	cpi	r18, 0x01	; 1
 666:	09 f0       	breq	.+2      	; 0x66a <TB_Process0+0x176>
 668:	8c c0       	rjmp	.+280    	; 0x782 <TB_Process0+0x28e>
			{
				switch (TB_Buf_In.b[TB_BUF_TYPE])
 66a:	20 91 40 01 	lds	r18, 0x0140	; 0x800140 <TB_Buf_In+0x2>
 66e:	21 34       	cpi	r18, 0x41	; 65
 670:	49 f1       	breq	.+82     	; 0x6c4 <TB_Process0+0x1d0>
 672:	18 f4       	brcc	.+6      	; 0x67a <TB_Process0+0x186>
 674:	20 34       	cpi	r18, 0x40	; 64
 676:	41 f0       	breq	.+16     	; 0x688 <TB_Process0+0x194>
 678:	7f c0       	rjmp	.+254    	; 0x778 <TB_Process0+0x284>
 67a:	22 34       	cpi	r18, 0x42	; 66
 67c:	09 f4       	brne	.+2      	; 0x680 <TB_Process0+0x18c>
 67e:	40 c0       	rjmp	.+128    	; 0x700 <TB_Process0+0x20c>
 680:	2c 34       	cpi	r18, 0x4C	; 76
 682:	09 f4       	brne	.+2      	; 0x686 <TB_Process0+0x192>
 684:	5b c0       	rjmp	.+182    	; 0x73c <TB_Process0+0x248>
 686:	78 c0       	rjmp	.+240    	; 0x778 <TB_Process0+0x284>
				{
					case TB_GBPARAM_EEMAGIC:
						if (TB_Value != TB_gbparam1.eemagic)
 688:	00 91 22 01 	lds	r16, 0x0122	; 0x800122 <TB_gbparam1>
 68c:	10 e0       	ldi	r17, 0x00	; 0
 68e:	20 e0       	ldi	r18, 0x00	; 0
 690:	30 e0       	ldi	r19, 0x00	; 0
 692:	80 17       	cp	r24, r16
 694:	91 07       	cpc	r25, r17
 696:	a2 07       	cpc	r26, r18
 698:	b3 07       	cpc	r27, r19
 69a:	39 f0       	breq	.+14     	; 0x6aa <TB_Process0+0x1b6>
						{
							TB_gbparam1.eemagic = TB_Value;
 69c:	40 93 22 01 	sts	0x0122, r20	; 0x800122 <TB_gbparam1>
							b = (void *) &(TB_gbparam1.eemagic) - (void *) &(TB_gbparam1);
							eeprom_update_byte( (uint8_t * ) (b+EEPROM_START_ADDRESS_1), TB_gbparam1.eemagic);
 6a0:	64 2f       	mov	r22, r20
 6a2:	80 e2       	ldi	r24, 0x20	; 32
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	0e 94 4b 07 	call	0xe96	; 0xe96 <eeprom_update_byte>
						}
						TB_SendAck(TB_ERR_EEPROM_OK, TB_Value);
 6aa:	40 91 0d 01 	lds	r20, 0x010D	; 0x80010d <TB_Value>
 6ae:	50 91 0e 01 	lds	r21, 0x010E	; 0x80010e <TB_Value+0x1>
 6b2:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <TB_Value+0x2>
 6b6:	70 91 10 01 	lds	r23, 0x0110	; 0x800110 <TB_Value+0x3>
 6ba:	85 e6       	ldi	r24, 0x65	; 101
 6bc:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <TB_SendAck>
		default:
			TB_SendAck(TB_ERR_COMMAND, TB_Buf_In.b[TB_BUF_COMMAND]); // invalid command
			return 0;
	}
	
	return 0;
 6c0:	c0 e0       	ldi	r28, 0x00	; 0
							TB_gbparam1.eemagic = TB_Value;
							b = (void *) &(TB_gbparam1.eemagic) - (void *) &(TB_gbparam1);
							eeprom_update_byte( (uint8_t * ) (b+EEPROM_START_ADDRESS_1), TB_gbparam1.eemagic);
						}
						TB_SendAck(TB_ERR_EEPROM_OK, TB_Value);
						break;
 6c2:	31 c1       	rjmp	.+610    	; 0x926 <TB_Process0+0x432>
					case TB_GBPARAM_BAUD:
						if (TB_Value != TB_gbparam1.baud)
 6c4:	00 91 23 01 	lds	r16, 0x0123	; 0x800123 <TB_gbparam1+0x1>
 6c8:	10 e0       	ldi	r17, 0x00	; 0
 6ca:	20 e0       	ldi	r18, 0x00	; 0
 6cc:	30 e0       	ldi	r19, 0x00	; 0
 6ce:	80 17       	cp	r24, r16
 6d0:	91 07       	cpc	r25, r17
 6d2:	a2 07       	cpc	r26, r18
 6d4:	b3 07       	cpc	r27, r19
 6d6:	39 f0       	breq	.+14     	; 0x6e6 <TB_Process0+0x1f2>
						{
							TB_gbparam1.baud = TB_Value;
 6d8:	40 93 23 01 	sts	0x0123, r20	; 0x800123 <TB_gbparam1+0x1>
							b = (void *) &(TB_gbparam1.baud) - (void *) &(TB_gbparam1);
							eeprom_update_byte( (uint8_t * ) (b+EEPROM_START_ADDRESS_1), TB_gbparam1.baud);
 6dc:	64 2f       	mov	r22, r20
 6de:	81 e2       	ldi	r24, 0x21	; 33
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	0e 94 4b 07 	call	0xe96	; 0xe96 <eeprom_update_byte>
						}
						TB_SendAck(TB_ERR_EEPROM_OK, TB_Value);
 6e6:	40 91 0d 01 	lds	r20, 0x010D	; 0x80010d <TB_Value>
 6ea:	50 91 0e 01 	lds	r21, 0x010E	; 0x80010e <TB_Value+0x1>
 6ee:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <TB_Value+0x2>
 6f2:	70 91 10 01 	lds	r23, 0x0110	; 0x800110 <TB_Value+0x3>
 6f6:	85 e6       	ldi	r24, 0x65	; 101
 6f8:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <TB_SendAck>
		default:
			TB_SendAck(TB_ERR_COMMAND, TB_Buf_In.b[TB_BUF_COMMAND]); // invalid command
			return 0;
	}
	
	return 0;
 6fc:	c0 e0       	ldi	r28, 0x00	; 0
							TB_gbparam1.baud = TB_Value;
							b = (void *) &(TB_gbparam1.baud) - (void *) &(TB_gbparam1);
							eeprom_update_byte( (uint8_t * ) (b+EEPROM_START_ADDRESS_1), TB_gbparam1.baud);
						}
						TB_SendAck(TB_ERR_EEPROM_OK, TB_Value);
						break;
 6fe:	13 c1       	rjmp	.+550    	; 0x926 <TB_Process0+0x432>
					case TB_GBPARAM_ADDRESS:
						if (TB_Value != TB_gbparam1.address)
 700:	00 91 24 01 	lds	r16, 0x0124	; 0x800124 <TB_gbparam1+0x2>
 704:	10 e0       	ldi	r17, 0x00	; 0
 706:	20 e0       	ldi	r18, 0x00	; 0
 708:	30 e0       	ldi	r19, 0x00	; 0
 70a:	80 17       	cp	r24, r16
 70c:	91 07       	cpc	r25, r17
 70e:	a2 07       	cpc	r26, r18
 710:	b3 07       	cpc	r27, r19
 712:	39 f0       	breq	.+14     	; 0x722 <TB_Process0+0x22e>
						{
							TB_gbparam1.address = TB_Value;
 714:	40 93 24 01 	sts	0x0124, r20	; 0x800124 <TB_gbparam1+0x2>
							b = (void *) &(TB_gbparam1.address) - (void *) &(TB_gbparam1);
							eeprom_update_byte( (uint8_t * ) (b+EEPROM_START_ADDRESS_1), TB_gbparam1.address);
 718:	64 2f       	mov	r22, r20
 71a:	82 e2       	ldi	r24, 0x22	; 34
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	0e 94 4b 07 	call	0xe96	; 0xe96 <eeprom_update_byte>
						}
						TB_SendAck(TB_ERR_EEPROM_OK, TB_Value);
 722:	40 91 0d 01 	lds	r20, 0x010D	; 0x80010d <TB_Value>
 726:	50 91 0e 01 	lds	r21, 0x010E	; 0x80010e <TB_Value+0x1>
 72a:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <TB_Value+0x2>
 72e:	70 91 10 01 	lds	r23, 0x0110	; 0x800110 <TB_Value+0x3>
 732:	85 e6       	ldi	r24, 0x65	; 101
 734:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <TB_SendAck>
		default:
			TB_SendAck(TB_ERR_COMMAND, TB_Buf_In.b[TB_BUF_COMMAND]); // invalid command
			return 0;
	}
	
	return 0;
 738:	c0 e0       	ldi	r28, 0x00	; 0
							TB_gbparam1.address = TB_Value;
							b = (void *) &(TB_gbparam1.address) - (void *) &(TB_gbparam1);
							eeprom_update_byte( (uint8_t * ) (b+EEPROM_START_ADDRESS_1), TB_gbparam1.address);
						}
						TB_SendAck(TB_ERR_EEPROM_OK, TB_Value);
						break;
 73a:	f5 c0       	rjmp	.+490    	; 0x926 <TB_Process0+0x432>
					case TB_GBPARAM_HOST_ADDR:
						if (TB_Value != TB_gbparam1.host_address)
 73c:	00 91 26 01 	lds	r16, 0x0126	; 0x800126 <TB_gbparam1+0x4>
 740:	10 e0       	ldi	r17, 0x00	; 0
 742:	20 e0       	ldi	r18, 0x00	; 0
 744:	30 e0       	ldi	r19, 0x00	; 0
 746:	80 17       	cp	r24, r16
 748:	91 07       	cpc	r25, r17
 74a:	a2 07       	cpc	r26, r18
 74c:	b3 07       	cpc	r27, r19
 74e:	39 f0       	breq	.+14     	; 0x75e <TB_Process0+0x26a>
						{
							TB_gbparam1.host_address = TB_Value;
 750:	40 93 26 01 	sts	0x0126, r20	; 0x800126 <TB_gbparam1+0x4>
							b = (void *) &(TB_gbparam1.host_address) - (void *) &(TB_gbparam1);
							eeprom_update_byte( (uint8_t * ) (b+EEPROM_START_ADDRESS_1), TB_gbparam1.host_address);
 754:	64 2f       	mov	r22, r20
 756:	84 e2       	ldi	r24, 0x24	; 36
 758:	90 e0       	ldi	r25, 0x00	; 0
 75a:	0e 94 4b 07 	call	0xe96	; 0xe96 <eeprom_update_byte>
						}
						TB_SendAck(TB_ERR_EEPROM_OK, TB_Value);
 75e:	40 91 0d 01 	lds	r20, 0x010D	; 0x80010d <TB_Value>
 762:	50 91 0e 01 	lds	r21, 0x010E	; 0x80010e <TB_Value+0x1>
 766:	60 91 0f 01 	lds	r22, 0x010F	; 0x80010f <TB_Value+0x2>
 76a:	70 91 10 01 	lds	r23, 0x0110	; 0x800110 <TB_Value+0x3>
 76e:	85 e6       	ldi	r24, 0x65	; 101
 770:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <TB_SendAck>
		default:
			TB_SendAck(TB_ERR_COMMAND, TB_Buf_In.b[TB_BUF_COMMAND]); // invalid command
			return 0;
	}
	
	return 0;
 774:	c0 e0       	ldi	r28, 0x00	; 0
							TB_gbparam1.host_address = TB_Value;
							b = (void *) &(TB_gbparam1.host_address) - (void *) &(TB_gbparam1);
							eeprom_update_byte( (uint8_t * ) (b+EEPROM_START_ADDRESS_1), TB_gbparam1.host_address);
						}
						TB_SendAck(TB_ERR_EEPROM_OK, TB_Value);
						break;
 776:	d7 c0       	rjmp	.+430    	; 0x926 <TB_Process0+0x432>
					default:
						TB_SendAck(TB_ERR_TYPE, TB_Value); // invalid value
 778:	83 e0       	ldi	r24, 0x03	; 3
 77a:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <TB_SendAck>
		default:
			TB_SendAck(TB_ERR_COMMAND, TB_Buf_In.b[TB_BUF_COMMAND]); // invalid command
			return 0;
	}
	
	return 0;
 77e:	c0 e0       	ldi	r28, 0x00	; 0
						}
						TB_SendAck(TB_ERR_EEPROM_OK, TB_Value);
						break;
					default:
						TB_SendAck(TB_ERR_TYPE, TB_Value); // invalid value
						break;
 780:	d2 c0       	rjmp	.+420    	; 0x926 <TB_Process0+0x432>
				}
			}
			else
			{
				TB_SendAck(TB_ERR_MOTOR, TB_Buf_In.b[TB_BUF_MOTOR]); // invalid value
 782:	40 91 41 01 	lds	r20, 0x0141	; 0x800141 <TB_Buf_In+0x3>
 786:	50 e0       	ldi	r21, 0x00	; 0
 788:	60 e0       	ldi	r22, 0x00	; 0
 78a:	70 e0       	ldi	r23, 0x00	; 0
 78c:	87 e0       	ldi	r24, 0x07	; 7
 78e:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <TB_SendAck>
		default:
			TB_SendAck(TB_ERR_COMMAND, TB_Buf_In.b[TB_BUF_COMMAND]); // invalid command
			return 0;
	}
	
	return 0;
 792:	c0 e0       	ldi	r28, 0x00	; 0
 794:	c8 c0       	rjmp	.+400    	; 0x926 <TB_Process0+0x432>
			{
				TB_SendAck(TB_ERR_MOTOR, TB_Buf_In.b[TB_BUF_MOTOR]); // invalid value
			}
			break;
		case TB_CMD_GGP:
			if (TB_Buf_In.b[TB_BUF_MOTOR] == 0)
 796:	c0 91 41 01 	lds	r28, 0x0141	; 0x800141 <TB_Buf_In+0x3>
 79a:	c1 11       	cpse	r28, r1
 79c:	3a c0       	rjmp	.+116    	; 0x812 <TB_Process0+0x31e>
			{
				switch (TB_Buf_In.b[TB_BUF_TYPE])
 79e:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <TB_Buf_In+0x2>
 7a2:	81 34       	cpi	r24, 0x41	; 65
 7a4:	49 f0       	breq	.+18     	; 0x7b8 <TB_Process0+0x2c4>
 7a6:	18 f4       	brcc	.+6      	; 0x7ae <TB_Process0+0x2ba>
 7a8:	80 34       	cpi	r24, 0x40	; 64
 7aa:	09 f1       	breq	.+66     	; 0x7ee <TB_Process0+0x2fa>
 7ac:	29 c0       	rjmp	.+82     	; 0x800 <TB_Process0+0x30c>
 7ae:	82 34       	cpi	r24, 0x42	; 66
 7b0:	61 f0       	breq	.+24     	; 0x7ca <TB_Process0+0x2d6>
 7b2:	8c 34       	cpi	r24, 0x4C	; 76
 7b4:	99 f0       	breq	.+38     	; 0x7dc <TB_Process0+0x2e8>
 7b6:	24 c0       	rjmp	.+72     	; 0x800 <TB_Process0+0x30c>
				{
					case TB_GBPARAM_BAUD:
						TB_SendAck(TB_ERR_EEPROM_OK, TB_gbparam0.baud);
 7b8:	40 91 28 01 	lds	r20, 0x0128	; 0x800128 <TB_gbparam0+0x1>
 7bc:	50 e0       	ldi	r21, 0x00	; 0
 7be:	60 e0       	ldi	r22, 0x00	; 0
 7c0:	70 e0       	ldi	r23, 0x00	; 0
 7c2:	85 e6       	ldi	r24, 0x65	; 101
 7c4:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <TB_SendAck>
						break;
 7c8:	ae c0       	rjmp	.+348    	; 0x926 <TB_Process0+0x432>
					case TB_GBPARAM_ADDRESS:
						TB_SendAck(TB_ERR_EEPROM_OK, TB_gbparam0.address);
 7ca:	40 91 29 01 	lds	r20, 0x0129	; 0x800129 <TB_gbparam0+0x2>
 7ce:	50 e0       	ldi	r21, 0x00	; 0
 7d0:	60 e0       	ldi	r22, 0x00	; 0
 7d2:	70 e0       	ldi	r23, 0x00	; 0
 7d4:	85 e6       	ldi	r24, 0x65	; 101
 7d6:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <TB_SendAck>
						break;
 7da:	a5 c0       	rjmp	.+330    	; 0x926 <TB_Process0+0x432>
					case TB_GBPARAM_HOST_ADDR:
						TB_SendAck(TB_ERR_EEPROM_OK, TB_gbparam0.host_address);
 7dc:	40 91 2b 01 	lds	r20, 0x012B	; 0x80012b <TB_gbparam0+0x4>
 7e0:	50 e0       	ldi	r21, 0x00	; 0
 7e2:	60 e0       	ldi	r22, 0x00	; 0
 7e4:	70 e0       	ldi	r23, 0x00	; 0
 7e6:	85 e6       	ldi	r24, 0x65	; 101
 7e8:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <TB_SendAck>
						break;
 7ec:	9c c0       	rjmp	.+312    	; 0x926 <TB_Process0+0x432>
					case TB_GBPARAM_EEMAGIC:
						TB_SendAck(TB_ERR_EEPROM_OK, TB_gbparam0.eemagic);
 7ee:	40 91 27 01 	lds	r20, 0x0127	; 0x800127 <TB_gbparam0>
 7f2:	50 e0       	ldi	r21, 0x00	; 0
 7f4:	60 e0       	ldi	r22, 0x00	; 0
 7f6:	70 e0       	ldi	r23, 0x00	; 0
 7f8:	85 e6       	ldi	r24, 0x65	; 101
 7fa:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <TB_SendAck>
						break;
 7fe:	93 c0       	rjmp	.+294    	; 0x926 <TB_Process0+0x432>
					default:
						TB_SendAck(TB_ERR_TYPE, TB_Buf_In.b[TB_BUF_TYPE]); // invalid value
 800:	40 91 40 01 	lds	r20, 0x0140	; 0x800140 <TB_Buf_In+0x2>
 804:	50 e0       	ldi	r21, 0x00	; 0
 806:	60 e0       	ldi	r22, 0x00	; 0
 808:	70 e0       	ldi	r23, 0x00	; 0
 80a:	83 e0       	ldi	r24, 0x03	; 3
 80c:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <TB_SendAck>
						break;
 810:	8a c0       	rjmp	.+276    	; 0x926 <TB_Process0+0x432>
				}
			}
			else if (TB_Buf_In.b[TB_BUF_MOTOR] == 1)
 812:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <TB_Buf_In+0x3>
 816:	81 30       	cpi	r24, 0x01	; 1
 818:	09 f0       	breq	.+2      	; 0x81c <TB_Process0+0x328>
 81a:	3f c0       	rjmp	.+126    	; 0x89a <TB_Process0+0x3a6>
			{
				switch (TB_Buf_In.b[TB_BUF_TYPE])
 81c:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <TB_Buf_In+0x2>
 820:	81 34       	cpi	r24, 0x41	; 65
 822:	49 f0       	breq	.+18     	; 0x836 <TB_Process0+0x342>
 824:	18 f4       	brcc	.+6      	; 0x82c <TB_Process0+0x338>
 826:	80 34       	cpi	r24, 0x40	; 64
 828:	21 f1       	breq	.+72     	; 0x872 <TB_Process0+0x37e>
 82a:	2d c0       	rjmp	.+90     	; 0x886 <TB_Process0+0x392>
 82c:	82 34       	cpi	r24, 0x42	; 66
 82e:	69 f0       	breq	.+26     	; 0x84a <TB_Process0+0x356>
 830:	8c 34       	cpi	r24, 0x4C	; 76
 832:	a9 f0       	breq	.+42     	; 0x85e <TB_Process0+0x36a>
 834:	28 c0       	rjmp	.+80     	; 0x886 <TB_Process0+0x392>
				{
					case TB_GBPARAM_BAUD:
						TB_SendAck(TB_ERR_EEPROM_OK, TB_gbparam1.baud);
 836:	40 91 23 01 	lds	r20, 0x0123	; 0x800123 <TB_gbparam1+0x1>
 83a:	50 e0       	ldi	r21, 0x00	; 0
 83c:	60 e0       	ldi	r22, 0x00	; 0
 83e:	70 e0       	ldi	r23, 0x00	; 0
 840:	85 e6       	ldi	r24, 0x65	; 101
 842:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <TB_SendAck>
		default:
			TB_SendAck(TB_ERR_COMMAND, TB_Buf_In.b[TB_BUF_COMMAND]); // invalid command
			return 0;
	}
	
	return 0;
 846:	c0 e0       	ldi	r28, 0x00	; 0
			{
				switch (TB_Buf_In.b[TB_BUF_TYPE])
				{
					case TB_GBPARAM_BAUD:
						TB_SendAck(TB_ERR_EEPROM_OK, TB_gbparam1.baud);
						break;
 848:	6e c0       	rjmp	.+220    	; 0x926 <TB_Process0+0x432>
					case TB_GBPARAM_ADDRESS:
						TB_SendAck(TB_ERR_EEPROM_OK, TB_gbparam1.address);
 84a:	40 91 24 01 	lds	r20, 0x0124	; 0x800124 <TB_gbparam1+0x2>
 84e:	50 e0       	ldi	r21, 0x00	; 0
 850:	60 e0       	ldi	r22, 0x00	; 0
 852:	70 e0       	ldi	r23, 0x00	; 0
 854:	85 e6       	ldi	r24, 0x65	; 101
 856:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <TB_SendAck>
		default:
			TB_SendAck(TB_ERR_COMMAND, TB_Buf_In.b[TB_BUF_COMMAND]); // invalid command
			return 0;
	}
	
	return 0;
 85a:	c0 e0       	ldi	r28, 0x00	; 0
					case TB_GBPARAM_BAUD:
						TB_SendAck(TB_ERR_EEPROM_OK, TB_gbparam1.baud);
						break;
					case TB_GBPARAM_ADDRESS:
						TB_SendAck(TB_ERR_EEPROM_OK, TB_gbparam1.address);
						break;
 85c:	64 c0       	rjmp	.+200    	; 0x926 <TB_Process0+0x432>
					case TB_GBPARAM_HOST_ADDR:
						TB_SendAck(TB_ERR_EEPROM_OK, TB_gbparam1.host_address);
 85e:	40 91 26 01 	lds	r20, 0x0126	; 0x800126 <TB_gbparam1+0x4>
 862:	50 e0       	ldi	r21, 0x00	; 0
 864:	60 e0       	ldi	r22, 0x00	; 0
 866:	70 e0       	ldi	r23, 0x00	; 0
 868:	85 e6       	ldi	r24, 0x65	; 101
 86a:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <TB_SendAck>
		default:
			TB_SendAck(TB_ERR_COMMAND, TB_Buf_In.b[TB_BUF_COMMAND]); // invalid command
			return 0;
	}
	
	return 0;
 86e:	c0 e0       	ldi	r28, 0x00	; 0
					case TB_GBPARAM_ADDRESS:
						TB_SendAck(TB_ERR_EEPROM_OK, TB_gbparam1.address);
						break;
					case TB_GBPARAM_HOST_ADDR:
						TB_SendAck(TB_ERR_EEPROM_OK, TB_gbparam1.host_address);
						break;
 870:	5a c0       	rjmp	.+180    	; 0x926 <TB_Process0+0x432>
					case TB_GBPARAM_EEMAGIC:
						TB_SendAck(TB_ERR_EEPROM_OK, TB_gbparam1.eemagic);
 872:	40 91 22 01 	lds	r20, 0x0122	; 0x800122 <TB_gbparam1>
 876:	50 e0       	ldi	r21, 0x00	; 0
 878:	60 e0       	ldi	r22, 0x00	; 0
 87a:	70 e0       	ldi	r23, 0x00	; 0
 87c:	85 e6       	ldi	r24, 0x65	; 101
 87e:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <TB_SendAck>
		default:
			TB_SendAck(TB_ERR_COMMAND, TB_Buf_In.b[TB_BUF_COMMAND]); // invalid command
			return 0;
	}
	
	return 0;
 882:	c0 e0       	ldi	r28, 0x00	; 0
					case TB_GBPARAM_HOST_ADDR:
						TB_SendAck(TB_ERR_EEPROM_OK, TB_gbparam1.host_address);
						break;
					case TB_GBPARAM_EEMAGIC:
						TB_SendAck(TB_ERR_EEPROM_OK, TB_gbparam1.eemagic);
						break;
 884:	50 c0       	rjmp	.+160    	; 0x926 <TB_Process0+0x432>
					default:
						TB_SendAck(TB_ERR_TYPE, TB_Buf_In.b[TB_BUF_TYPE]); // invalid value
 886:	40 91 40 01 	lds	r20, 0x0140	; 0x800140 <TB_Buf_In+0x2>
 88a:	50 e0       	ldi	r21, 0x00	; 0
 88c:	60 e0       	ldi	r22, 0x00	; 0
 88e:	70 e0       	ldi	r23, 0x00	; 0
 890:	83 e0       	ldi	r24, 0x03	; 3
 892:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <TB_SendAck>
		default:
			TB_SendAck(TB_ERR_COMMAND, TB_Buf_In.b[TB_BUF_COMMAND]); // invalid command
			return 0;
	}
	
	return 0;
 896:	c0 e0       	ldi	r28, 0x00	; 0
					case TB_GBPARAM_EEMAGIC:
						TB_SendAck(TB_ERR_EEPROM_OK, TB_gbparam1.eemagic);
						break;
					default:
						TB_SendAck(TB_ERR_TYPE, TB_Buf_In.b[TB_BUF_TYPE]); // invalid value
						break;
 898:	46 c0       	rjmp	.+140    	; 0x926 <TB_Process0+0x432>
				}
			}
			else
			{
				TB_SendAck(TB_ERR_MOTOR, TB_Buf_In.b[TB_BUF_MOTOR]); // invalid value
 89a:	40 91 41 01 	lds	r20, 0x0141	; 0x800141 <TB_Buf_In+0x3>
 89e:	50 e0       	ldi	r21, 0x00	; 0
 8a0:	60 e0       	ldi	r22, 0x00	; 0
 8a2:	70 e0       	ldi	r23, 0x00	; 0
 8a4:	87 e0       	ldi	r24, 0x07	; 7
 8a6:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <TB_SendAck>
		default:
			TB_SendAck(TB_ERR_COMMAND, TB_Buf_In.b[TB_BUF_COMMAND]); // invalid command
			return 0;
	}
	
	return 0;
 8aa:	c0 e0       	ldi	r28, 0x00	; 0
 8ac:	3c c0       	rjmp	.+120    	; 0x926 <TB_Process0+0x432>
				TB_SendAck(TB_ERR_MOTOR, TB_Buf_In.b[TB_BUF_MOTOR]); // invalid value
			}
			break;
		case 136: // get module version
			//verze Firmware
			if (TB_Buf_In.b[TB_BUF_TYPE] == 0)
 8ae:	c0 91 40 01 	lds	r28, 0x0140	; 0x800140 <TB_Buf_In+0x2>
 8b2:	c1 11       	cpse	r28, r1
 8b4:	19 c0       	rjmp	.+50     	; 0x8e8 <TB_Process0+0x3f4>
			{
				// text mode
				TB_Buf_Out.b[0] = TB_addr_Reply;					// Standartnì adresa 2
 8b6:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <TB_addr_Reply>
 8ba:	ee e6       	ldi	r30, 0x6E	; 110
 8bc:	f1 e0       	ldi	r31, 0x01	; 1
 8be:	80 83       	st	Z, r24
				TB_Buf_Out.b[1] = MODULE_ADDRESS;					// Jaká adresa modulu
 8c0:	82 e0       	ldi	r24, 0x02	; 2
 8c2:	81 83       	std	Z+1, r24	; 0x01
				TB_Buf_Out.b[2] = MODULE_TYPE;								// Jaký modul odpovídá
 8c4:	89 ec       	ldi	r24, 0xC9	; 201
 8c6:	82 83       	std	Z+2, r24	; 0x02
				TB_Buf_Out.b[3] = TB_Buf_In.b[TB_BUF_COMMAND];		//
 8c8:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <TB_Buf_In+0x1>
 8cc:	83 83       	std	Z+3, r24	; 0x03
				TB_Buf_Out.b[4] = 'V';								// Verze softwaru.
 8ce:	86 e5       	ldi	r24, 0x56	; 86
 8d0:	84 83       	std	Z+4, r24	; 0x04
				TB_Buf_Out.b[5] = '1';
 8d2:	81 e3       	ldi	r24, 0x31	; 49
 8d4:	85 83       	std	Z+5, r24	; 0x05
				TB_Buf_Out.b[6] = '.';
 8d6:	8e e2       	ldi	r24, 0x2E	; 46
 8d8:	86 83       	std	Z+6, r24	; 0x06
				TB_Buf_Out.b[7] = '2';
 8da:	82 e3       	ldi	r24, 0x32	; 50
 8dc:	87 83       	std	Z+7, r24	; 0x07
				TB_calcSum();
 8de:	0e 94 4b 02 	call	0x496	; 0x496 <TB_calcSum>
				TB_Send_Com();
 8e2:	0e 94 3b 02 	call	0x476	; 0x476 <TB_Send_Com>
 8e6:	1f c0       	rjmp	.+62     	; 0x926 <TB_Process0+0x432>
			}
			else if (TB_Buf_In.b[TB_BUF_TYPE] == 0)
 8e8:	c0 91 40 01 	lds	r28, 0x0140	; 0x800140 <TB_Buf_In+0x2>
 8ec:	c1 11       	cpse	r28, r1
 8ee:	08 c0       	rjmp	.+16     	; 0x900 <TB_Process0+0x40c>
			{
				// binary mode
				TB_SendAck(TB_ERR_OK, (0x10203040));
 8f0:	40 e4       	ldi	r20, 0x40	; 64
 8f2:	50 e3       	ldi	r21, 0x30	; 48
 8f4:	60 e2       	ldi	r22, 0x20	; 32
 8f6:	70 e1       	ldi	r23, 0x10	; 16
 8f8:	84 e6       	ldi	r24, 0x64	; 100
 8fa:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <TB_SendAck>
 8fe:	13 c0       	rjmp	.+38     	; 0x926 <TB_Process0+0x432>
			}
			else
			{
				TB_SendAck(TB_ERR_TYPE, TB_Buf_In.b[TB_BUF_TYPE]);
 900:	40 91 40 01 	lds	r20, 0x0140	; 0x800140 <TB_Buf_In+0x2>
 904:	50 e0       	ldi	r21, 0x00	; 0
 906:	60 e0       	ldi	r22, 0x00	; 0
 908:	70 e0       	ldi	r23, 0x00	; 0
 90a:	83 e0       	ldi	r24, 0x03	; 3
 90c:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <TB_SendAck>
		default:
			TB_SendAck(TB_ERR_COMMAND, TB_Buf_In.b[TB_BUF_COMMAND]); // invalid command
			return 0;
	}
	
	return 0;
 910:	c0 e0       	ldi	r28, 0x00	; 0
 912:	09 c0       	rjmp	.+18     	; 0x926 <TB_Process0+0x432>
			{
				TB_SendAck(TB_ERR_TYPE, TB_Buf_In.b[TB_BUF_TYPE]);
			}
			break;
		default:
			TB_SendAck(TB_ERR_COMMAND, TB_Buf_In.b[TB_BUF_COMMAND]); // invalid command
 914:	40 91 3f 01 	lds	r20, 0x013F	; 0x80013f <TB_Buf_In+0x1>
 918:	50 e0       	ldi	r21, 0x00	; 0
 91a:	60 e0       	ldi	r22, 0x00	; 0
 91c:	70 e0       	ldi	r23, 0x00	; 0
 91e:	82 e0       	ldi	r24, 0x02	; 2
 920:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <TB_SendAck>
			return 0;
 924:	c0 e0       	ldi	r28, 0x00	; 0
	}
	
	return 0;
}
 926:	8c 2f       	mov	r24, r28
 928:	cf 91       	pop	r28
 92a:	1f 91       	pop	r17
 92c:	0f 91       	pop	r16
 92e:	08 95       	ret

00000930 <TB_Init0>:

// Interní RS485
void TB_Init0( void )
{
	//  DST,   SRC, size
	eeprom_read_block((void *) &TB_gbparam0, (const void *) EEPROM_START_ADDRESS_0, sizeof(struct TB_GBPARAM));
 930:	45 e0       	ldi	r20, 0x05	; 5
 932:	50 e0       	ldi	r21, 0x00	; 0
 934:	60 e1       	ldi	r22, 0x10	; 16
 936:	70 e0       	ldi	r23, 0x00	; 0
 938:	87 e2       	ldi	r24, 0x27	; 39
 93a:	91 e0       	ldi	r25, 0x01	; 1
 93c:	0e 94 3b 07 	call	0xe76	; 0xe76 <eeprom_read_block>
	if (TB_gbparam0.eemagic != 66)
 940:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <TB_gbparam0>
 944:	82 34       	cpi	r24, 0x42	; 66
 946:	91 f0       	breq	.+36     	; 0x96c <TB_Init0+0x3c>
	{
		// not valid data in eeprom
		TB_gbparam0.eemagic = 66;
 948:	e7 e2       	ldi	r30, 0x27	; 39
 94a:	f1 e0       	ldi	r31, 0x01	; 1
 94c:	82 e4       	ldi	r24, 0x42	; 66
 94e:	80 83       	st	Z, r24
		TB_gbparam0.baud = 10;
 950:	8a e0       	ldi	r24, 0x0A	; 10
 952:	81 83       	std	Z+1, r24	; 0x01
		TB_gbparam0.address = MODULE_ADDRESS;
 954:	82 e0       	ldi	r24, 0x02	; 2
 956:	82 83       	std	Z+2, r24	; 0x02
		TB_gbparam0.telegram_pause_time = 0;
 958:	13 82       	std	Z+3, r1	; 0x03
		TB_gbparam0.host_address = 2;
 95a:	84 83       	std	Z+4, r24	; 0x04
		// save default setting to eeprom
		eeprom_write_block((void *) &TB_gbparam0, (void *) EEPROM_START_ADDRESS_0, sizeof(struct TB_GBPARAM));
 95c:	45 e0       	ldi	r20, 0x05	; 5
 95e:	50 e0       	ldi	r21, 0x00	; 0
 960:	60 e1       	ldi	r22, 0x10	; 16
 962:	70 e0       	ldi	r23, 0x00	; 0
 964:	cf 01       	movw	r24, r30
 966:	0e 94 5d 07 	call	0xeba	; 0xeba <eeprom_write_block>
 96a:	04 c0       	rjmp	.+8      	; 0x974 <TB_Init0+0x44>
	}
	else
	{
		// zvolíme správnou komunikaèní rychlost:
		uart0_set_baud(TB_gbparam0.baud);
 96c:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <TB_gbparam0+0x1>
 970:	0e 94 14 06 	call	0xc28	; 0xc28 <uart0_set_baud>
	}
	// poznaèíme si adresy
	TB_addr_Reply = TB_gbparam0.host_address;
 974:	e7 e2       	ldi	r30, 0x27	; 39
 976:	f1 e0       	ldi	r31, 0x01	; 1
 978:	84 81       	ldd	r24, Z+4	; 0x04
 97a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <TB_addr_Reply>
	TB_addr_Module = TB_gbparam0.address;
 97e:	82 81       	ldd	r24, Z+2	; 0x02
 980:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <TB_addr_Module>
 984:	08 95       	ret

00000986 <TB_Init1>:


void TB_Init1( void )
{
	//  DST,   SRC, size
	eeprom_read_block((void *) &TB_gbparam1, (const void *) EEPROM_START_ADDRESS_1, sizeof(struct TB_GBPARAM));
 986:	45 e0       	ldi	r20, 0x05	; 5
 988:	50 e0       	ldi	r21, 0x00	; 0
 98a:	60 e2       	ldi	r22, 0x20	; 32
 98c:	70 e0       	ldi	r23, 0x00	; 0
 98e:	82 e2       	ldi	r24, 0x22	; 34
 990:	91 e0       	ldi	r25, 0x01	; 1
 992:	0e 94 3b 07 	call	0xe76	; 0xe76 <eeprom_read_block>
	if (TB_gbparam1.eemagic != 66)
 996:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <TB_gbparam1>
 99a:	82 34       	cpi	r24, 0x42	; 66
 99c:	91 f0       	breq	.+36     	; 0x9c2 <TB_Init1+0x3c>
	{
		// not valid data in eeprom
		TB_gbparam1.eemagic = 66;
 99e:	e2 e2       	ldi	r30, 0x22	; 34
 9a0:	f1 e0       	ldi	r31, 0x01	; 1
 9a2:	82 e4       	ldi	r24, 0x42	; 66
 9a4:	80 83       	st	Z, r24
		TB_gbparam1.baud = 7;
 9a6:	87 e0       	ldi	r24, 0x07	; 7
 9a8:	81 83       	std	Z+1, r24	; 0x01
		TB_gbparam1.address = MODULE_ADDRESS;
 9aa:	82 e0       	ldi	r24, 0x02	; 2
 9ac:	82 83       	std	Z+2, r24	; 0x02
		TB_gbparam1.telegram_pause_time = 0;
 9ae:	13 82       	std	Z+3, r1	; 0x03
		TB_gbparam1.host_address = 2;
 9b0:	84 83       	std	Z+4, r24	; 0x04
		// save default setting to eeprom
		eeprom_write_block((void *) &TB_gbparam1, (void *) EEPROM_START_ADDRESS_1, sizeof(struct TB_GBPARAM));
 9b2:	45 e0       	ldi	r20, 0x05	; 5
 9b4:	50 e0       	ldi	r21, 0x00	; 0
 9b6:	60 e2       	ldi	r22, 0x20	; 32
 9b8:	70 e0       	ldi	r23, 0x00	; 0
 9ba:	cf 01       	movw	r24, r30
 9bc:	0e 94 5d 07 	call	0xeba	; 0xeba <eeprom_write_block>
 9c0:	04 c0       	rjmp	.+8      	; 0x9ca <TB_Init1+0x44>
	}
	else
	{
		// zvolíme správnou komunikaèní rychlost:
		uart1_set_baud(TB_gbparam1.baud);
 9c2:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <TB_gbparam1+0x1>
 9c6:	0e 94 cf 01 	call	0x39e	; 0x39e <uart1_set_baud>
	}
	// poznaèíme si adresy
	TB_addr_Reply = TB_gbparam1.host_address;
 9ca:	e2 e2       	ldi	r30, 0x22	; 34
 9cc:	f1 e0       	ldi	r31, 0x01	; 1
 9ce:	84 81       	ldd	r24, Z+4	; 0x04
 9d0:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <TB_addr_Reply>
	TB_addr_Module = TB_gbparam1.address;
 9d4:	82 81       	ldd	r24, Z+2	; 0x02
 9d6:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <TB_addr_Module>
 9da:	08 95       	ret

000009dc <uart0_init>:


void uart0_transmit_char(uint8_t data)
{
	while ( !( UART0_UCSRA & (1 << UART0_UDRE)) );
	UART0_UDR = data;
 9dc:	cf 92       	push	r12
 9de:	df 92       	push	r13
 9e0:	ef 92       	push	r14
 9e2:	ff 92       	push	r15
 9e4:	6b 01       	movw	r12, r22
 9e6:	7c 01       	movw	r14, r24
 9e8:	cc 0c       	add	r12, r12
 9ea:	dd 1c       	adc	r13, r13
 9ec:	ee 1c       	adc	r14, r14
 9ee:	ff 1c       	adc	r15, r15
 9f0:	cc 0c       	add	r12, r12
 9f2:	dd 1c       	adc	r13, r13
 9f4:	ee 1c       	adc	r14, r14
 9f6:	ff 1c       	adc	r15, r15
 9f8:	cc 0c       	add	r12, r12
 9fa:	dd 1c       	adc	r13, r13
 9fc:	ee 1c       	adc	r14, r14
 9fe:	ff 1c       	adc	r15, r15
 a00:	a7 01       	movw	r20, r14
 a02:	96 01       	movw	r18, r12
 a04:	22 0f       	add	r18, r18
 a06:	33 1f       	adc	r19, r19
 a08:	44 1f       	adc	r20, r20
 a0a:	55 1f       	adc	r21, r21
 a0c:	60 e0       	ldi	r22, 0x00	; 0
 a0e:	74 e2       	ldi	r23, 0x24	; 36
 a10:	84 ef       	ldi	r24, 0xF4	; 244
 a12:	90 e0       	ldi	r25, 0x00	; 0
 a14:	0e 94 13 07 	call	0xe26	; 0xe26 <__udivmodsi4>
 a18:	21 50       	subi	r18, 0x01	; 1
 a1a:	31 09       	sbc	r19, r1
 a1c:	41 e0       	ldi	r20, 0x01	; 1
 a1e:	50 e0       	ldi	r21, 0x00	; 0
 a20:	c6 16       	cp	r12, r22
 a22:	d7 06       	cpc	r13, r23
 a24:	e8 06       	cpc	r14, r24
 a26:	f9 06       	cpc	r15, r25
 a28:	10 f0       	brcs	.+4      	; 0xa2e <uart0_init+0x52>
 a2a:	40 e0       	ldi	r20, 0x00	; 0
 a2c:	50 e0       	ldi	r21, 0x00	; 0
 a2e:	24 0f       	add	r18, r20
 a30:	35 1f       	adc	r19, r21
 a32:	20 93 c4 00 	sts	0x00C4, r18	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 a36:	30 93 c5 00 	sts	0x00C5, r19	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 a3a:	e1 ec       	ldi	r30, 0xC1	; 193
 a3c:	f0 e0       	ldi	r31, 0x00	; 0
 a3e:	80 81       	ld	r24, Z
 a40:	88 61       	ori	r24, 0x18	; 24
 a42:	80 83       	st	Z, r24
 a44:	e2 ec       	ldi	r30, 0xC2	; 194
 a46:	f0 e0       	ldi	r31, 0x00	; 0
 a48:	80 81       	ld	r24, Z
 a4a:	86 60       	ori	r24, 0x06	; 6
 a4c:	80 83       	st	Z, r24
 a4e:	80 e0       	ldi	r24, 0x00	; 0
 a50:	ff 90       	pop	r15
 a52:	ef 90       	pop	r14
 a54:	df 90       	pop	r13
 a56:	cf 90       	pop	r12
 a58:	08 95       	ret

00000a5a <uart0_interrupt_rx>:
 a5a:	88 23       	and	r24, r24
 a5c:	31 f0       	breq	.+12     	; 0xa6a <uart0_interrupt_rx+0x10>
 a5e:	e1 ec       	ldi	r30, 0xC1	; 193
 a60:	f0 e0       	ldi	r31, 0x00	; 0
 a62:	80 81       	ld	r24, Z
 a64:	80 68       	ori	r24, 0x80	; 128
 a66:	80 83       	st	Z, r24
 a68:	05 c0       	rjmp	.+10     	; 0xa74 <uart0_interrupt_rx+0x1a>
 a6a:	e1 ec       	ldi	r30, 0xC1	; 193
 a6c:	f0 e0       	ldi	r31, 0x00	; 0
 a6e:	80 81       	ld	r24, Z
 a70:	80 78       	andi	r24, 0x80	; 128
 a72:	80 83       	st	Z, r24
 a74:	80 e0       	ldi	r24, 0x00	; 0
 a76:	08 95       	ret

00000a78 <uart0_interrupt_tx>:
 a78:	88 23       	and	r24, r24
 a7a:	31 f0       	breq	.+12     	; 0xa88 <uart0_interrupt_tx+0x10>
 a7c:	e1 ec       	ldi	r30, 0xC1	; 193
 a7e:	f0 e0       	ldi	r31, 0x00	; 0
 a80:	80 81       	ld	r24, Z
 a82:	80 64       	ori	r24, 0x40	; 64
 a84:	80 83       	st	Z, r24
 a86:	05 c0       	rjmp	.+10     	; 0xa92 <uart0_interrupt_tx+0x1a>
 a88:	e1 ec       	ldi	r30, 0xC1	; 193
 a8a:	f0 e0       	ldi	r31, 0x00	; 0
 a8c:	80 81       	ld	r24, Z
 a8e:	80 74       	andi	r24, 0x40	; 64
 a90:	80 83       	st	Z, r24
 a92:	80 e0       	ldi	r24, 0x00	; 0
 a94:	08 95       	ret

00000a96 <uart0_receive_char>:
 a96:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <uart0_rx_ptr>
 a9a:	f0 e0       	ldi	r31, 0x00	; 0
 a9c:	e4 5a       	subi	r30, 0xA4	; 164
 a9e:	fe 4f       	sbci	r31, 0xFE	; 254
 aa0:	80 83       	st	Z, r24
 aa2:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <uart0_rx_ptr>
 aa6:	8f 5f       	subi	r24, 0xFF	; 255
 aa8:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <uart0_rx_ptr>
 aac:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <uart0_rx_iptr>
 ab0:	8f 5f       	subi	r24, 0xFF	; 255
 ab2:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <uart0_rx_iptr>
 ab6:	08 95       	ret

00000ab8 <__vector_20>:
 ab8:	1f 92       	push	r1
 aba:	0f 92       	push	r0
 abc:	0f b6       	in	r0, 0x3f	; 63
 abe:	0f 92       	push	r0
 ac0:	11 24       	eor	r1, r1
 ac2:	2f 93       	push	r18
 ac4:	3f 93       	push	r19
 ac6:	4f 93       	push	r20
 ac8:	5f 93       	push	r21
 aca:	6f 93       	push	r22
 acc:	7f 93       	push	r23
 ace:	8f 93       	push	r24
 ad0:	9f 93       	push	r25
 ad2:	af 93       	push	r26
 ad4:	bf 93       	push	r27
 ad6:	ef 93       	push	r30
 ad8:	ff 93       	push	r31
 ada:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <citacka0+0x1>
 ade:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <citacka0>
 ae2:	5e 98       	cbi	0x0b, 6	; 11
 ae4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 ae8:	e9 e8       	ldi	r30, 0x89	; 137
 aea:	f1 e0       	ldi	r31, 0x01	; 1
 aec:	80 83       	st	Z, r24
 aee:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 af2:	91 83       	std	Z+1, r25	; 0x01
 af4:	95 e0       	ldi	r25, 0x05	; 5
 af6:	92 83       	std	Z+2, r25	; 0x02
 af8:	0e 94 4b 05 	call	0xa96	; 0xa96 <uart0_receive_char>
 afc:	ff 91       	pop	r31
 afe:	ef 91       	pop	r30
 b00:	bf 91       	pop	r27
 b02:	af 91       	pop	r26
 b04:	9f 91       	pop	r25
 b06:	8f 91       	pop	r24
 b08:	7f 91       	pop	r23
 b0a:	6f 91       	pop	r22
 b0c:	5f 91       	pop	r21
 b0e:	4f 91       	pop	r20
 b10:	3f 91       	pop	r19
 b12:	2f 91       	pop	r18
 b14:	0f 90       	pop	r0
 b16:	0f be       	out	0x3f, r0	; 63
 b18:	0f 90       	pop	r0
 b1a:	1f 90       	pop	r1
 b1c:	18 95       	reti

00000b1e <__vector_22>:
 b1e:	1f 92       	push	r1
 b20:	0f 92       	push	r0
 b22:	0f b6       	in	r0, 0x3f	; 63
 b24:	0f 92       	push	r0
 b26:	11 24       	eor	r1, r1
 b28:	8f 93       	push	r24
 b2a:	ef 93       	push	r30
 b2c:	ff 93       	push	r31
 b2e:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <uart0_tx_flag>
 b32:	88 23       	and	r24, r24
 b34:	d9 f0       	breq	.+54     	; 0xb6c <__vector_22+0x4e>
 b36:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <uart0_tx_iptr>
 b3a:	89 30       	cpi	r24, 0x09	; 9
 b3c:	30 f0       	brcs	.+12     	; 0xb4a <__vector_22+0x2c>
 b3e:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <uart0_tx_flag>
 b42:	5c 98       	cbi	0x0b, 4	; 11
 b44:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <uart0_tx_iptr>
 b48:	0d c0       	rjmp	.+26     	; 0xb64 <__vector_22+0x46>
 b4a:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <uart0_tx_iptr>
 b4e:	f0 e0       	ldi	r31, 0x00	; 0
 b50:	e2 59       	subi	r30, 0x92	; 146
 b52:	fe 4f       	sbci	r31, 0xFE	; 254
 b54:	80 81       	ld	r24, Z
 b56:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 b5a:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <uart0_tx_iptr>
 b5e:	8f 5f       	subi	r24, 0xFF	; 255
 b60:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <uart0_tx_iptr>
 b64:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <uart0_rx_iptr>
 b68:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <uart0_rx_ptr>
 b6c:	ff 91       	pop	r31
 b6e:	ef 91       	pop	r30
 b70:	8f 91       	pop	r24
 b72:	0f 90       	pop	r0
 b74:	0f be       	out	0x3f, r0	; 63
 b76:	0f 90       	pop	r0
 b78:	1f 90       	pop	r1
 b7a:	18 95       	reti

00000b7c <check_uart0>:
 b7c:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <uart0_rx_iptr>
 b80:	89 30       	cpi	r24, 0x09	; 9
 b82:	18 f0       	brcs	.+6      	; 0xb8a <check_uart0+0xe>
 b84:	81 e0       	ldi	r24, 0x01	; 1
 b86:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <uart0_rx_flag>
 b8a:	f8 94       	cli
 b8c:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <uart0_rx_flag>
 b90:	88 23       	and	r24, r24
 b92:	09 f4       	brne	.+2      	; 0xb96 <check_uart0+0x1a>
 b94:	41 c0       	rjmp	.+130    	; 0xc18 <check_uart0+0x9c>
 b96:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <uart0_sum>
 b9a:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <uart0_i>
 b9e:	89 e0       	ldi	r24, 0x09	; 9
 ba0:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <uart0_i>
 ba4:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <uart0_i>
 ba8:	82 30       	cpi	r24, 0x02	; 2
 baa:	c0 f0       	brcs	.+48     	; 0xbdc <check_uart0+0x60>
 bac:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <uart0_rx_ptr>
 bb0:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <uart0_i>
 bb4:	f0 e0       	ldi	r31, 0x00	; 0
 bb6:	e8 1b       	sub	r30, r24
 bb8:	f1 09       	sbc	r31, r1
 bba:	e4 5a       	subi	r30, 0xA4	; 164
 bbc:	fe 4f       	sbci	r31, 0xFE	; 254
 bbe:	90 81       	ld	r25, Z
 bc0:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <uart0_sum>
 bc4:	89 0f       	add	r24, r25
 bc6:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <uart0_sum>
 bca:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <uart0_i>
 bce:	81 50       	subi	r24, 0x01	; 1
 bd0:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <uart0_i>
 bd4:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <uart0_i>
 bd8:	82 30       	cpi	r24, 0x02	; 2
 bda:	40 f7       	brcc	.-48     	; 0xbac <check_uart0+0x30>
 bdc:	e0 91 14 01 	lds	r30, 0x0114	; 0x800114 <uart0_rx_ptr>
 be0:	f0 e0       	ldi	r31, 0x00	; 0
 be2:	e5 5a       	subi	r30, 0xA5	; 165
 be4:	fe 4f       	sbci	r31, 0xFE	; 254
 be6:	80 81       	ld	r24, Z
 be8:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <uart0_check_sum>
 bec:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <uart0_sum>
 bf0:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <uart0_check_sum>
 bf4:	98 13       	cpse	r25, r24
 bf6:	06 c0       	rjmp	.+12     	; 0xc04 <check_uart0+0x88>
 bf8:	81 e0       	ldi	r24, 0x01	; 1
 bfa:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <uart0_ret>
 bfe:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <uart0_rx_iptr>
 c02:	07 c0       	rjmp	.+14     	; 0xc12 <check_uart0+0x96>
 c04:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <uart0_rx_iptr>
 c08:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <uart0_rx_ptr>
 c0c:	82 e0       	ldi	r24, 0x02	; 2
 c0e:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <uart0_ret>
 c12:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <uart0_check_sum>
 c16:	02 c0       	rjmp	.+4      	; 0xc1c <check_uart0+0xa0>
 c18:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <uart0_ret>
 c1c:	78 94       	sei
 c1e:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <uart0_rx_flag>
 c22:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <uart0_ret>
 c26:	08 95       	ret

00000c28 <uart0_set_baud>:
}

void uart0_set_baud(uint8_t baud)
{
	// UART port
	switch (baud) {
 c28:	90 e0       	ldi	r25, 0x00	; 0
 c2a:	8c 30       	cpi	r24, 0x0C	; 12
 c2c:	91 05       	cpc	r25, r1
 c2e:	a0 f5       	brcc	.+104    	; 0xc98 <uart0_set_baud+0x70>
 c30:	fc 01       	movw	r30, r24
 c32:	e6 5b       	subi	r30, 0xB6	; 182
 c34:	ff 4f       	sbci	r31, 0xFF	; 255
 c36:	0c 94 35 07 	jmp	0xe6a	; 0xe6a <__tablejump2__>
		case 0:
			MACRO_BAUDRATE(9600);
 c3a:	87 e6       	ldi	r24, 0x67	; 103
 c3c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
			break;
 c40:	08 95       	ret
		case 1:
			MACRO_BAUDRATE(14400);
 c42:	84 e4       	ldi	r24, 0x44	; 68
 c44:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
			break;
 c48:	08 95       	ret
		case 2:
			MACRO_BAUDRATE(19200);
 c4a:	83 e3       	ldi	r24, 0x33	; 51
 c4c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
			break;
 c50:	08 95       	ret
		case 3:
			MACRO_BAUDRATE(28800);
 c52:	82 e2       	ldi	r24, 0x22	; 34
 c54:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
			break;
 c58:	08 95       	ret
		case 4:
			MACRO_BAUDRATE(38400);
 c5a:	89 e1       	ldi	r24, 0x19	; 25
 c5c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
			break;
 c60:	08 95       	ret
		case 5:
			MACRO_BAUDRATE(57600);
 c62:	80 e1       	ldi	r24, 0x10	; 16
 c64:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
			break;
 c68:	08 95       	ret
		case 6:
			MACRO_BAUDRATE(76800);
 c6a:	8c e0       	ldi	r24, 0x0C	; 12
 c6c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
			break;
 c70:	08 95       	ret
		case 7:
			MACRO_BAUDRATE(115200);
 c72:	88 e0       	ldi	r24, 0x08	; 8
 c74:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
			break;
 c78:	08 95       	ret
		case 8:
			MACRO_BAUDRATE(230400);
 c7a:	83 e0       	ldi	r24, 0x03	; 3
 c7c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
			break;
 c80:	08 95       	ret
		case 9:
			MACRO_BAUDRATE(250000);
 c82:	83 e0       	ldi	r24, 0x03	; 3
 c84:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
			break;
 c88:	08 95       	ret
		case 10:
			MACRO_BAUDRATE(500000);
 c8a:	81 e0       	ldi	r24, 0x01	; 1
 c8c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
			break;
 c90:	08 95       	ret
		case 11:
			MACRO_BAUDRATE(1000000);
 c92:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
			break;
 c96:	08 95       	ret
		default:
			MACRO_BAUDRATE(115200);
 c98:	88 e0       	ldi	r24, 0x08	; 8
 c9a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 c9e:	08 95       	ret

00000ca0 <try_receive_data_uart0>:


void try_receive_data_uart0( void )
{
	uint8_t j=0;
	j = check_uart0();
 ca0:	0e 94 be 05 	call	0xb7c	; 0xb7c <check_uart0>
	if (j==1)
 ca4:	81 30       	cpi	r24, 0x01	; 1
 ca6:	09 f0       	breq	.+2      	; 0xcaa <try_receive_data_uart0+0xa>
 ca8:	5b c0       	rjmp	.+182    	; 0xd60 <try_receive_data_uart0+0xc0>
	{
		// Naplní Buffer trinamic
		TB_buf_fill_In();
 caa:	0e 94 0b 02 	call	0x416	; 0x416 <TB_buf_fill_In>
		LED1_ON;
 cae:	5f 9a       	sbi	0x0b, 7	; 11
		// Kontrola adresy
		if (TB_Buf_In.n.addr == TB_gbparam0.address)
 cb0:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <TB_Buf_In>
 cb4:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <TB_gbparam0+0x2>
 cb8:	89 13       	cpse	r24, r25
 cba:	40 c0       	rjmp	.+128    	; 0xd3c <try_receive_data_uart0+0x9c>
		{
			// Rozebrání pøíkazu
			switch (TB_Process0())
 cbc:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <TB_Process0>
 cc0:	8e 30       	cpi	r24, 0x0E	; 14
 cc2:	19 f0       	breq	.+6      	; 0xcca <try_receive_data_uart0+0x2a>
 cc4:	8f 30       	cpi	r24, 0x0F	; 15
 cc6:	e9 f0       	breq	.+58     	; 0xd02 <try_receive_data_uart0+0x62>
 cc8:	08 95       	ret
			{
				// Zde se vypisují pøíkazy uživatelské, které chceme implementovat
				case TB_CMD_SIO:
				switch(TB_Buf_In.b[TB_BUF_TYPE])
 cca:	40 91 40 01 	lds	r20, 0x0140	; 0x800140 <TB_Buf_In+0x2>
 cce:	41 11       	cpse	r20, r1
 cd0:	12 c0       	rjmp	.+36     	; 0xcf6 <try_receive_data_uart0+0x56>
				{
					case 0:
					switch(TB_Buf_In.b[TB_BUF_MOTOR])
 cd2:	40 91 41 01 	lds	r20, 0x0141	; 0x800141 <TB_Buf_In+0x3>
 cd6:	41 11       	cpse	r20, r1
 cd8:	07 c0       	rjmp	.+14     	; 0xce8 <try_receive_data_uart0+0x48>
					{
						case 0:
						TB_SendAck(TB_ERR_OK, 0);
 cda:	40 e0       	ldi	r20, 0x00	; 0
 cdc:	50 e0       	ldi	r21, 0x00	; 0
 cde:	ba 01       	movw	r22, r20
 ce0:	84 e6       	ldi	r24, 0x64	; 100
 ce2:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <TB_SendAck>
						break;
 ce6:	0d c0       	rjmp	.+26     	; 0xd02 <try_receive_data_uart0+0x62>
						default:
						TB_SendAck(TB_ERR_MOTOR, TB_Buf_In.b[TB_BUF_MOTOR]);
 ce8:	50 e0       	ldi	r21, 0x00	; 0
 cea:	60 e0       	ldi	r22, 0x00	; 0
 cec:	70 e0       	ldi	r23, 0x00	; 0
 cee:	87 e0       	ldi	r24, 0x07	; 7
 cf0:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <TB_SendAck>
						break;
 cf4:	06 c0       	rjmp	.+12     	; 0xd02 <try_receive_data_uart0+0x62>
					}
					break;
					default:
					TB_SendAck(TB_ERR_TYPE, TB_Buf_In.b[TB_BUF_TYPE]);
 cf6:	50 e0       	ldi	r21, 0x00	; 0
 cf8:	60 e0       	ldi	r22, 0x00	; 0
 cfa:	70 e0       	ldi	r23, 0x00	; 0
 cfc:	83 e0       	ldi	r24, 0x03	; 3
 cfe:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <TB_SendAck>
					break;
				}
				case TB_CMD_GIO:
				switch(TB_Buf_In.b[TB_BUF_TYPE])
 d02:	40 91 40 01 	lds	r20, 0x0140	; 0x800140 <TB_Buf_In+0x2>
 d06:	41 11       	cpse	r20, r1
 d08:	12 c0       	rjmp	.+36     	; 0xd2e <try_receive_data_uart0+0x8e>
				{
					case 0:
					switch(TB_Buf_In.b[TB_BUF_MOTOR])
 d0a:	40 91 41 01 	lds	r20, 0x0141	; 0x800141 <TB_Buf_In+0x3>
 d0e:	41 11       	cpse	r20, r1
 d10:	07 c0       	rjmp	.+14     	; 0xd20 <try_receive_data_uart0+0x80>
					{
						case 0:
						TB_SendAck(TB_ERR_OK, 0);
 d12:	40 e0       	ldi	r20, 0x00	; 0
 d14:	50 e0       	ldi	r21, 0x00	; 0
 d16:	ba 01       	movw	r22, r20
 d18:	84 e6       	ldi	r24, 0x64	; 100
 d1a:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <TB_SendAck>
						break;
 d1e:	08 95       	ret
						default:
						TB_SendAck(TB_ERR_MOTOR, TB_Buf_In.b[TB_BUF_MOTOR]);
 d20:	50 e0       	ldi	r21, 0x00	; 0
 d22:	60 e0       	ldi	r22, 0x00	; 0
 d24:	70 e0       	ldi	r23, 0x00	; 0
 d26:	87 e0       	ldi	r24, 0x07	; 7
 d28:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <TB_SendAck>
						break;
 d2c:	08 95       	ret
					}
					break;
					default:
					TB_SendAck(TB_ERR_TYPE, TB_Buf_In.b[TB_BUF_TYPE]);
 d2e:	50 e0       	ldi	r21, 0x00	; 0
 d30:	60 e0       	ldi	r22, 0x00	; 0
 d32:	70 e0       	ldi	r23, 0x00	; 0
 d34:	83 e0       	ldi	r24, 0x03	; 3
 d36:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <TB_SendAck>
					break;
 d3a:	08 95       	ret
				}
			}
		}
		else if (TB_Buf_In.n.addr >= ADDRESS_EXT)
 d3c:	84 36       	cpi	r24, 0x64	; 100
 d3e:	c0 f0       	brcs	.+48     	; 0xd70 <try_receive_data_uart0+0xd0>
		{
			// Povolení odesílání dat na externí linku
			uart1_tx_flag=TRUE;
 d40:	81 e0       	ldi	r24, 0x01	; 1
 d42:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <uart1_tx_flag>
			RS485_EN_EXT_transmite;
 d46:	5d 9a       	sbi	0x0b, 5	; 11
			UART1_UDR = TB_Buf_In.b[uart1_tx_iptr++];
 d48:	e0 91 07 01 	lds	r30, 0x0107	; 0x800107 <uart1_tx_iptr>
 d4c:	8e 0f       	add	r24, r30
 d4e:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <uart1_tx_iptr>
 d52:	f0 e0       	ldi	r31, 0x00	; 0
 d54:	e2 5c       	subi	r30, 0xC2	; 194
 d56:	fe 4f       	sbci	r31, 0xFE	; 254
 d58:	80 81       	ld	r24, Z
 d5a:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 d5e:	08 95       	ret
		}
	}
	else if (j==2)
 d60:	82 30       	cpi	r24, 0x02	; 2
 d62:	31 f4       	brne	.+12     	; 0xd70 <try_receive_data_uart0+0xd0>
	{
		TB_SendAck(TB_ERR_SUM, 0);
 d64:	40 e0       	ldi	r20, 0x00	; 0
 d66:	50 e0       	ldi	r21, 0x00	; 0
 d68:	ba 01       	movw	r22, r20
 d6a:	81 e0       	ldi	r24, 0x01	; 1
 d6c:	0e 94 5a 02 	call	0x4b4	; 0x4b4 <TB_SendAck>
 d70:	08 95       	ret

00000d72 <try_receive_data_uart1>:
}

void try_receive_data_uart1( void )
{
	uint8_t j=0;
	j = check_uart1();
 d72:	0e 94 79 01 	call	0x2f2	; 0x2f2 <check_uart1>
	if (j==1)
 d76:	81 30       	cpi	r24, 0x01	; 1
 d78:	89 f4       	brne	.+34     	; 0xd9c <try_receive_data_uart1+0x2a>
	{	
		// Naplní Buffer trinamic
		TB_buf_fill_Out();
 d7a:	0e 94 23 02 	call	0x446	; 0x446 <TB_buf_fill_Out>
		// Kontrola adresy
		// Povolení odesílání dat na externí linku (Nastartování pøerušení)
		uart0_tx_flag=TRUE;
 d7e:	81 e0       	ldi	r24, 0x01	; 1
 d80:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <uart0_tx_flag>
		RS485_EN_INT_transmite;
 d84:	5c 9a       	sbi	0x0b, 4	; 11
		// Odeslání prvního Bytu
		UART0_UDR = TB_Buf_Out.b[uart0_tx_iptr++];
 d86:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <uart0_tx_iptr>
 d8a:	8e 0f       	add	r24, r30
 d8c:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <uart0_tx_iptr>
 d90:	f0 e0       	ldi	r31, 0x00	; 0
 d92:	e2 59       	subi	r30, 0x92	; 146
 d94:	fe 4f       	sbci	r31, 0xFE	; 254
 d96:	80 81       	ld	r24, Z
 d98:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 d9c:	08 95       	ret

00000d9e <main>:
}

int main(void)
{
	
	UB = UART0_DEFAULT_BAUD;
 d9e:	80 e0       	ldi	r24, 0x00	; 0
 da0:	92 ec       	ldi	r25, 0xC2	; 194
 da2:	a1 e0       	ldi	r26, 0x01	; 1
 da4:	b0 e0       	ldi	r27, 0x00	; 0
 da6:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <UB>
 daa:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <UB+0x1>
 dae:	a0 93 1e 01 	sts	0x011E, r26	; 0x80011e <UB+0x2>
 db2:	b0 93 1f 01 	sts	0x011F, r27	; 0x80011f <UB+0x3>
	uart0_error = uart0_init(UB);
 db6:	60 e0       	ldi	r22, 0x00	; 0
 db8:	72 ec       	ldi	r23, 0xC2	; 194
 dba:	81 e0       	ldi	r24, 0x01	; 1
 dbc:	90 e0       	ldi	r25, 0x00	; 0
 dbe:	0e 94 ee 04 	call	0x9dc	; 0x9dc <uart0_init>
 dc2:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <uart0_error>
	UB = UART1_DEFAULT_BAUD;
 dc6:	80 e8       	ldi	r24, 0x80	; 128
 dc8:	95 e2       	ldi	r25, 0x25	; 37
 dca:	a0 e0       	ldi	r26, 0x00	; 0
 dcc:	b0 e0       	ldi	r27, 0x00	; 0
 dce:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <UB>
 dd2:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <UB+0x1>
 dd6:	a0 93 1e 01 	sts	0x011E, r26	; 0x80011e <UB+0x2>
 dda:	b0 93 1f 01 	sts	0x011F, r27	; 0x80011f <UB+0x3>
	uart1_error = uart1_init(UB);
 dde:	60 e8       	ldi	r22, 0x80	; 128
 de0:	75 e2       	ldi	r23, 0x25	; 37
 de2:	80 e0       	ldi	r24, 0x00	; 0
 de4:	90 e0       	ldi	r25, 0x00	; 0
 de6:	0e 94 a9 00 	call	0x152	; 0x152 <uart1_init>
 dea:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <uart1_error>
	uart0_interrupt_rx(TRUE);
 dee:	81 e0       	ldi	r24, 0x01	; 1
 df0:	0e 94 2d 05 	call	0xa5a	; 0xa5a <uart0_interrupt_rx>
	uart0_interrupt_tx(TRUE);
 df4:	81 e0       	ldi	r24, 0x01	; 1
 df6:	0e 94 3c 05 	call	0xa78	; 0xa78 <uart0_interrupt_tx>
	uart1_interrupt_rx(TRUE);
 dfa:	81 e0       	ldi	r24, 0x01	; 1
 dfc:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <uart1_interrupt_rx>
	uart1_interrupt_tx(TRUE);
 e00:	81 e0       	ldi	r24, 0x01	; 1
 e02:	0e 94 f7 00 	call	0x1ee	; 0x1ee <uart1_interrupt_tx>
	
	TB_Init0();
 e06:	0e 94 98 04 	call	0x930	; 0x930 <TB_Init0>
	TB_Init1();
 e0a:	0e 94 c3 04 	call	0x986	; 0x986 <TB_Init1>
	
	Init_Board();
 e0e:	0e 94 6a 00 	call	0xd4	; 0xd4 <Init_Board>
	
	// Povolení globálního pøerušení
	sei();
 e12:	78 94       	sei
	// Hlavní smyèka programu
	while (1) 
    {
		
		// Odeslání uart1 na uart0, nebo-li data z externí RS485 na Interní.
 		try_receive_data_uart0();
 e14:	0e 94 50 06 	call	0xca0	; 0xca0 <try_receive_data_uart0>

		try_receive_data_uart1();
 e18:	0e 94 b9 06 	call	0xd72	; 0xd72 <try_receive_data_uart1>
		

		simple_flag_null0();
 e1c:	0e 94 77 00 	call	0xee	; 0xee <simple_flag_null0>
		
		simple_flag_null1();
 e20:	0e 94 90 00 	call	0x120	; 0x120 <simple_flag_null1>

    }
 e24:	f7 cf       	rjmp	.-18     	; 0xe14 <main+0x76>

00000e26 <__udivmodsi4>:
 e26:	a1 e2       	ldi	r26, 0x21	; 33
 e28:	1a 2e       	mov	r1, r26
 e2a:	aa 1b       	sub	r26, r26
 e2c:	bb 1b       	sub	r27, r27
 e2e:	fd 01       	movw	r30, r26
 e30:	0d c0       	rjmp	.+26     	; 0xe4c <__udivmodsi4_ep>

00000e32 <__udivmodsi4_loop>:
 e32:	aa 1f       	adc	r26, r26
 e34:	bb 1f       	adc	r27, r27
 e36:	ee 1f       	adc	r30, r30
 e38:	ff 1f       	adc	r31, r31
 e3a:	a2 17       	cp	r26, r18
 e3c:	b3 07       	cpc	r27, r19
 e3e:	e4 07       	cpc	r30, r20
 e40:	f5 07       	cpc	r31, r21
 e42:	20 f0       	brcs	.+8      	; 0xe4c <__udivmodsi4_ep>
 e44:	a2 1b       	sub	r26, r18
 e46:	b3 0b       	sbc	r27, r19
 e48:	e4 0b       	sbc	r30, r20
 e4a:	f5 0b       	sbc	r31, r21

00000e4c <__udivmodsi4_ep>:
 e4c:	66 1f       	adc	r22, r22
 e4e:	77 1f       	adc	r23, r23
 e50:	88 1f       	adc	r24, r24
 e52:	99 1f       	adc	r25, r25
 e54:	1a 94       	dec	r1
 e56:	69 f7       	brne	.-38     	; 0xe32 <__udivmodsi4_loop>
 e58:	60 95       	com	r22
 e5a:	70 95       	com	r23
 e5c:	80 95       	com	r24
 e5e:	90 95       	com	r25
 e60:	9b 01       	movw	r18, r22
 e62:	ac 01       	movw	r20, r24
 e64:	bd 01       	movw	r22, r26
 e66:	cf 01       	movw	r24, r30
 e68:	08 95       	ret

00000e6a <__tablejump2__>:
 e6a:	ee 0f       	add	r30, r30
 e6c:	ff 1f       	adc	r31, r31
 e6e:	05 90       	lpm	r0, Z+
 e70:	f4 91       	lpm	r31, Z
 e72:	e0 2d       	mov	r30, r0
 e74:	09 94       	ijmp

00000e76 <eeprom_read_block>:
 e76:	dc 01       	movw	r26, r24
 e78:	cb 01       	movw	r24, r22

00000e7a <eeprom_read_blraw>:
 e7a:	fc 01       	movw	r30, r24
 e7c:	f9 99       	sbic	0x1f, 1	; 31
 e7e:	fe cf       	rjmp	.-4      	; 0xe7c <eeprom_read_blraw+0x2>
 e80:	06 c0       	rjmp	.+12     	; 0xe8e <eeprom_read_blraw+0x14>
 e82:	f2 bd       	out	0x22, r31	; 34
 e84:	e1 bd       	out	0x21, r30	; 33
 e86:	f8 9a       	sbi	0x1f, 0	; 31
 e88:	31 96       	adiw	r30, 0x01	; 1
 e8a:	00 b4       	in	r0, 0x20	; 32
 e8c:	0d 92       	st	X+, r0
 e8e:	41 50       	subi	r20, 0x01	; 1
 e90:	50 40       	sbci	r21, 0x00	; 0
 e92:	b8 f7       	brcc	.-18     	; 0xe82 <eeprom_read_blraw+0x8>
 e94:	08 95       	ret

00000e96 <eeprom_update_byte>:
 e96:	26 2f       	mov	r18, r22

00000e98 <eeprom_update_r18>:
 e98:	f9 99       	sbic	0x1f, 1	; 31
 e9a:	fe cf       	rjmp	.-4      	; 0xe98 <eeprom_update_r18>
 e9c:	92 bd       	out	0x22, r25	; 34
 e9e:	81 bd       	out	0x21, r24	; 33
 ea0:	f8 9a       	sbi	0x1f, 0	; 31
 ea2:	01 97       	sbiw	r24, 0x01	; 1
 ea4:	00 b4       	in	r0, 0x20	; 32
 ea6:	02 16       	cp	r0, r18
 ea8:	39 f0       	breq	.+14     	; 0xeb8 <eeprom_update_r18+0x20>
 eaa:	1f ba       	out	0x1f, r1	; 31
 eac:	20 bd       	out	0x20, r18	; 32
 eae:	0f b6       	in	r0, 0x3f	; 63
 eb0:	f8 94       	cli
 eb2:	fa 9a       	sbi	0x1f, 2	; 31
 eb4:	f9 9a       	sbi	0x1f, 1	; 31
 eb6:	0f be       	out	0x3f, r0	; 63
 eb8:	08 95       	ret

00000eba <eeprom_write_block>:
 eba:	dc 01       	movw	r26, r24
 ebc:	cb 01       	movw	r24, r22
 ebe:	03 c0       	rjmp	.+6      	; 0xec6 <eeprom_write_block+0xc>
 ec0:	2d 91       	ld	r18, X+
 ec2:	0e 94 68 07 	call	0xed0	; 0xed0 <eeprom_write_r18>
 ec6:	41 50       	subi	r20, 0x01	; 1
 ec8:	50 40       	sbci	r21, 0x00	; 0
 eca:	d0 f7       	brcc	.-12     	; 0xec0 <eeprom_write_block+0x6>
 ecc:	08 95       	ret

00000ece <eeprom_write_byte>:
 ece:	26 2f       	mov	r18, r22

00000ed0 <eeprom_write_r18>:
 ed0:	f9 99       	sbic	0x1f, 1	; 31
 ed2:	fe cf       	rjmp	.-4      	; 0xed0 <eeprom_write_r18>
 ed4:	1f ba       	out	0x1f, r1	; 31
 ed6:	92 bd       	out	0x22, r25	; 34
 ed8:	81 bd       	out	0x21, r24	; 33
 eda:	20 bd       	out	0x20, r18	; 32
 edc:	0f b6       	in	r0, 0x3f	; 63
 ede:	f8 94       	cli
 ee0:	fa 9a       	sbi	0x1f, 2	; 31
 ee2:	f9 9a       	sbi	0x1f, 1	; 31
 ee4:	0f be       	out	0x3f, r0	; 63
 ee6:	01 96       	adiw	r24, 0x01	; 1
 ee8:	08 95       	ret

00000eea <_exit>:
 eea:	f8 94       	cli

00000eec <__stop_program>:
 eec:	ff cf       	rjmp	.-2      	; 0xeec <__stop_program>
